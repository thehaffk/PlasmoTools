import logging
from typing import Optional

import disnake
from aiohttp import ClientSession
from disnake import ApplicationCommandInteraction
from disnake.ext import commands

import plasmotools.utils.database.plasmo_structures.projects as projects_db
from plasmotools import checks, settings
from plasmotools.utils import api, formatters
from plasmotools.utils.api import bank
from plasmotools.utils.api.tokens import get_token_scopes
from plasmotools.utils.autocompleters.bank import \
    search_bank_cards_autocompleter
from plasmotools.utils.autocompleters.plasmo_structures import \
    payouts_projects_autocompleter
from plasmotools.utils.database import plasmo_structures as database

logger = logging.getLogger(__name__)


# todo: Rewrite with buttons


class Payouts(commands.Cog):
    def __init__(self, bot: disnake.ext.commands.Bot):
        self.bot = bot

    # TODO:  payouts statistics
    # TODO: remove create/read/update/delete commands and combine it to /projects

    @commands.guild_only()
    @commands.slash_command(
        dm_permission=False,
    )
    @checks.blocked_users_slash_command_check()
    async def projects(self, inter: ApplicationCommandInteraction):
        """
        –ü–æ–º–æ—â—å –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –≤—ã–ø–ª–∞—Ç–∞–º {{PROJECTS_COMMAND}}
        """
        guild = await database.guilds.get_guild(inter.guild.id)
        if guild is None:
            await inter.send(
                embed=disnake.Embed(
                    color=disnake.Color.red(),
                    title="–û—à–∏–±–∫–∞",
                    description="–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.\n"
                    "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ "
                    f"[–ø–æ–¥–¥–µ—Ä–∂–∫—É digital drugs technologies]({settings.DevServer.support_invite})",
                ),
                ephemeral=True,
            )
            return
        await inter.send(
            embed=disnake.Embed(
                color=disnake.Color.green(),
                description="–ü—Ä–æ–µ–∫—Ç—ã –≤ Plasmo Tools - —ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–ª–∞—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ "
                "/–ø—Ä–æ–µ–∫—Ç—ã-—Å–æ–∑–¥–∞—Ç—å —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ </payout:1077320503632609291>\n\n"
                f"**–ü–æ–ª—É—á–µ–Ω–∏–µ plasmo_token**\n –ö–æ–≥–¥–∞ –ø–µ—Ä–µ–π–¥–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
                f"–í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ —Å–∞–π—Ç, –≥–¥–µ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:\n"
                f"pt.haffk.tech/oauth/#access_token=***123TOKEN123**&scope=...&token_type=...",
            ),
            ephemeral=True,
            components=[
                disnake.ui.Button(
                    url=settings.oauth2_url_for_projects,
                    emoji="üîó",
                    label="–ü–æ–ª—É—á–∏—Ç—å plasmo token",
                )
            ],
        )

    @commands.guild_only()
    @commands.slash_command(name="–ø—Ä–æ–µ–∫—Ç—ã-—Å–æ–∑–¥–∞—Ç—å", dm_permission=False)
    @commands.default_member_permissions(administrator=True)
    @checks.blocked_users_slash_command_check()
    async def projects_create(  # todo: remove
        self,
        inter: ApplicationCommandInteraction,
        name: str,
        webhook_url: str,
        plasmo_bearer_token: str,
        from_card: int = commands.Param(gt=0, lt=10000),
    ):
        """
        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç

        Parameters
        ----------
        inter
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ò–Ω—Ç–µ—Ä–ø–æ–ª"
        webhook_url: –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±—Ö—É–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ https://discord.com/api/webhooks/...)
        from_card: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –≤—ã–ø–ª–∞—Ç–∞
        plasmo_bearer_token: –¢–æ–∫–µ–Ω –ø–ª–∞–∑–º–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–ø—Ä–æ–µ–∫—Ç—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å
        """
        # todo: autocomplete for from_card
        guild = await database.guilds.get_guild(inter.guild.id)
        if guild is None:
            await inter.send(
                embed=disnake.Embed(
                    color=disnake.Color.red(),
                    title="–û—à–∏–±–∫–∞",
                    description="–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.\n"
                    "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ "
                    f"[–ø–æ–¥–¥–µ—Ä–∂–∫—É digital drugs technologies]({settings.DevServer.support_invite})",
                ),
                ephemeral=True,
            )
            return
        await inter.response.defer(ephemeral=True)
        await inter.edit_original_message(
            embed=disnake.Embed(
                color=disnake.Color.dark_green(),
                title="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É—é —Ç–æ–∫–µ–Ω...",
            ),
        )
        scopes = await get_token_scopes(plasmo_bearer_token)
        if "bank:transfer" not in scopes and "bank:manage" not in scopes:
            await inter.edit_original_message(
                embed=disnake.Embed(
                    color=disnake.Color.red(),
                    title="–û—à–∏–±–∫–∞",
                    description="–£–∫–∞–∑–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω. ||Missing bank:manage / bank:transfer scopes||\n"
                    f"–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –≤ [–ø–æ–¥–¥–µ—Ä–∂–∫–µ DDT]({settings.DevServer.support_invite})",
                ),
            )
            return
        await inter.edit_original_message(
            embed=disnake.Embed(
                color=disnake.Color.dark_green(),
                title="–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç...",
            ),
        )
        db_project = await projects_db.register_project(
            name=name,
            guild_discord_id=inter.guild.id,
            is_active=True,
            webhook_url=webhook_url,
            from_card=from_card,
            plasmo_bearer_token=plasmo_bearer_token,
        )
        await inter.edit_original_message(
            embed=disnake.Embed(
                color=disnake.Color.green(),
                title="–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
                description=f"–ü—Ä–æ–µ–∫—Ç: {name}\n"
                f"–í–µ–±—Ö—É–∫: {webhook_url}\n"
                f"–ö–∞—Ä—Ç–∞: {from_card}\n"
                f"–¢–æ–∫–µ–Ω: ||{plasmo_bearer_token[:-5]}\\*\\*\\*\\*||\n"
                f"ID: {db_project.id}",
            ),
        )

    @commands.guild_only()
    @commands.slash_command(name="–ø—Ä–æ–µ–∫—Ç—ã-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", dm_permission=False)
    @commands.default_member_permissions(administrator=True)
    @checks.blocked_users_slash_command_check()
    async def projects_edit(  # todo: remove
        self,
        inter: ApplicationCommandInteraction,
        project_id: int,
        name: Optional[str] = None,
        webhook_url: Optional[str] = None,
        is_active: Optional[bool] = None,
        from_card: Optional[int] = commands.Param(default=None),
        plasmo_bearer_token: Optional[str] = None,
    ):
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        Parameters
        ----------
        inter
        project_id: –ê–π–¥–∏ –ø—Ä–æ–µ–∫—Ç–∞
        webhook_url: –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±—Ö—É–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (https://discordapp.com/api/webhooks/{id}/{token})
        is_active: –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø—Ä–æ–µ–∫—Ç
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ò–Ω—Ç–µ—Ä–ø–æ–ª" –∏–ª–∏ "–ü–æ—Å—Ç—Ä–æ–π–∫–∞ —Å—É–¥–∞"
        from_card: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –≤—ã–ø–ª–∞—Ç–∞
        plasmo_bearer_token: –¢–æ–∫–µ–Ω –ø–ª–∞–∑–º–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–ø—Ä–æ–µ–∫—Ç—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å
        """
        await inter.response.defer(ephemeral=True)
        db_project = await projects_db.get_project(project_id)
        if db_project is None:
            await inter.send(
                embed=disnake.Embed(
                    color=disnake.Color.red(),
                    title="–û—à–∏–±–∫–∞",
                    description="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                ),
                ephemeral=True,
            )
            return
        if db_project.guild_discord_id != inter.guild.id:
            await inter.send(
                embed=disnake.Embed(
                    color=disnake.Color.red(),
                    title="–û—à–∏–±–∫–∞",
                    description="–ü—Ä–æ–µ–∫—Ç –Ω–µ –ø—Ä–∏–Ω–∞–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Å–µ—Ä–≤–µ—Ä—É",
                ),
                ephemeral=True,
            )
            return
        await db_project.edit(
            name=name,
            is_active=is_active,
            webhook_url=webhook_url,
            from_card=from_card,
            plasmo_bearer_token=plasmo_bearer_token,
        )

        await inter.send(
            embed=disnake.Embed(
                color=disnake.Color.green(),
                title="–ü—Ä–æ–µ–∫—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω",
            ),
            ephemeral=True,
        )

    @commands.guild_only()
    @commands.slash_command(name="–ø—Ä–æ–µ–∫—Ç—ã-—É–¥–∞–ª–∏—Ç—å", dm_permission=False)
    @commands.default_member_permissions(administrator=True)
    @checks.blocked_users_slash_command_check()
    async def projects_delete(  # todo: remove
        self,
        inter: ApplicationCommandInteraction,
        project_id: int,
    ):
        """
        –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Parameters
        ----------
        inter
        project_id: –ê–π–¥–∏ –ø—Ä–æ–µ–∫—Ç–∞

        """
        await inter.response.defer(ephemeral=True)
        db_project = await projects_db.get_project(project_id)
        if db_project is None:
            await inter.edit_original_message(
                embed=disnake.Embed(
                    color=disnake.Color.red(),
                    title="–û—à–∏–±–∫–∞",
                    description="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                ),
            )
            return
        if db_project.guild_discord_id != inter.guild.id:
            await inter.send(
                embed=disnake.Embed(
                    color=disnake.Color.red(),
                    title="–û—à–∏–±–∫–∞",
                    description="–ü—Ä–æ–µ–∫—Ç –Ω–µ –ø—Ä–∏–Ω–∞–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Å–µ—Ä–≤–µ—Ä—É",
                ),
                ephemeral=True,
            )
            return
        await db_project.delete()

        await inter.edit_original_message(
            embed=disnake.Embed(
                color=disnake.Color.green(),
                title="–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω",
            ),
        )

    @commands.guild_only()
    @commands.slash_command(name="–ø—Ä–æ–µ–∫—Ç—ã-—Å–ø–∏—Å–æ–∫", dm_permission=False)
    @commands.default_member_permissions(administrator=True)
    @checks.blocked_users_slash_command_check()
    async def projects_list(self, inter: ApplicationCommandInteraction):  # todo: remove
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        """
        await inter.response.defer(ephemeral=True)
        projects = await projects_db.get_projects(guild_discord_id=inter.guild.id)
        embed = disnake.Embed(
            color=disnake.Color.green(),
            title=f"–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã {inter.guild.name}",
        ).set_footer(
            text="[–ü–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ] –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
        )
        if len(projects) == 0:
            embed.add_field(
                name="–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                value="–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–µ—Ä–µ–∑ `/–ø—Ä–æ–µ–∫—Ç—ã-—Å–æ–∑–¥–∞—Ç—å`",
            )
        else:
            embed.add_field(
                name="[–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å] –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
                value="–ê–π–¥–∏ / –ö–∞—Ä—Ç–∞ / –¢–æ–∫–µ–Ω \n–í–µ–±—Ö—É–∫",
            )
            for project in projects:
                project: projects_db.Project
                embed.add_field(
                    name=f"{project.name} - {'–ê–∫—Ç–∏–≤–µ–Ω' if project.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}  ",
                    value=f"{project.id} / {formatters.format_bank_card(project.from_card)} / "
                    f"||{project.plasmo_bearer_token[:-5]}\\*\\*\\*\\*||\n"
                    f"||{project.webhook_url}||",
                    inline=False,
                )

        await inter.edit_original_message(embed=embed)

    async def payout(
        self,
        interaction: disnake.Interaction,
        user: disnake.Member,
        amount: int,
        project: projects_db.Project,
        message: str,
        transaction_message: str = None,
    ) -> bool:
        if transaction_message is None:
            transaction_message = message
        guild = await database.guilds.get_guild(interaction.guild.id)
        if guild is None:
            await interaction.edit_original_message(
                embed=disnake.Embed(
                    color=disnake.Color.red(),
                    title="–û—à–∏–±–∫–∞",
                    description="–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.\n"
                    "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ "
                    f"[–ø–æ–¥–¥–µ—Ä–∂–∫—É digital drugs technologies]({settings.DevServer.support_invite})",
                ),
            )
            return False
        await interaction.edit_original_message(
            embed=disnake.Embed(
                color=disnake.Color.yellow(), description="–ü—Ä–æ–≤–µ—Ä—è—é –∏–≥—Ä–æ–∫–∞..."
            )
        )

        if not settings.DEBUG:
            plasmo_user = self.bot.get_guild(
                settings.PlasmoRPGuild.guild_id
            ).get_member(user.id)

            if (
                user.bot
                or plasmo_user is None
                or plasmo_user.guild.get_role(settings.PlasmoRPGuild.player_role_id)
                not in plasmo_user.roles
            ):
                await interaction.edit_original_message(
                    embed=disnake.Embed(
                        color=disnake.Color.red(),
                        title="–û—à–∏–±–∫–∞",
                        description="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–ª–∞—Ç–∏—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    ),
                )
                return False
            await interaction.edit_original_message(
                embed=disnake.Embed(
                    color=disnake.Color.yellow(),
                    description="–ü–æ–ª—É—á–∞—é –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã...",
                )
            )
        else:
            plasmo_user = user
        from_card = project.from_card

        user_card = await database.payouts.get_saved_card(user.id)
        if user_card is None:
            user_cards = sorted(
                [
                    card
                    for card in await bank.search_cards(
                        token=project.plasmo_bearer_token,
                        query=plasmo_user.display_name,
                    )
                    if card["id"] != from_card
                    and card["holder_type"] == 0
                    and card["holder"] == plasmo_user.display_name
                ],
                key=lambda card: card["value"],
                reverse=True,
            )

            if len(user_cards) == 0:
                await interaction.edit_original_message(
                    embed=disnake.Embed(
                        color=disnake.Color.red(),
                        title="–û—à–∏–±–∫–∞",
                        description="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã, Plasmo Tools —É–≤–µ–¥–æ–º–∏—Ç –∏–≥—Ä–æ–∫–∞ –æ–± —ç—Ç–æ–º",
                    ),
                )
                try:
                    await user.send(
                        embed=disnake.Embed(
                            color=disnake.Color.red(),
                            title="‚ö† Plasmo Tools –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã–ø–ª–∞—Ç—É",
                            description="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã –æ—Ç "
                            "—Å—Ç—Ä—É–∫—Ç—É—Ä –æ—Ñ–æ—Ä–º–∏—Ç–µ –∫–∞—Ä—Ç—É –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ª—é–±—É—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ "
                            "/—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å-–∫–∞—Ä—Ç—É-–¥–ª—è-–≤—ã–ø–ª–∞—Ç",
                        )
                    )
                except disnake.Forbidden:
                    await interaction.send(
                        embed=disnake.Embed(
                            color=disnake.Color.red(),
                            title="–û—à–∏–±–∫–∞",
                            description=f"–£ {user.mention} –∑–∞–∫—Ä—ã—Ç—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,"
                            f" –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –ª–∏—á–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞ "
                            f"—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ /—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å-–∫–∞—Ä—Ç—É-–¥–ª—è-–≤—ã–ø–ª–∞—Ç",
                        ),
                        ephemeral=True,
                    )
                return False

            user_card: int = user_cards[0]["id"]
            try:
                await user.send(
                    embed=disnake.Embed(
                        color=disnake.Color.red(),
                        title="‚ö† –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç",
                        description=f"–í—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–ø–ª–∞—Ç. –ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∫–∞—Ä—Ç—É "
                        f"**{formatters.format_bank_card(user_card)}** –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é.\n\n"
                        f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å **/—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å-–∫–∞—Ä—Ç—É-–¥–ª—è-–≤—ã–ø–ª–∞—Ç**, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã "
                        f"–Ω–∞ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É",
                    )
                )
            except disnake.Forbidden:
                pass
            await database.payouts.set_saved_card(user.id, user_card)

        await interaction.edit_original_message(
            embed=disnake.Embed(
                color=disnake.Color.yellow(), description="–ü–µ—Ä–µ–≤–æ–∂—É –∞–ª–º–∞–∑—ã..."
            )
        )
        if from_card == user_card:
            await interaction.edit_original_message(
                embed=disnake.Embed(
                    color=disnake.Color.red(),
                    title="–û—à–∏–±–∫–∞",
                    description="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–≤–µ—Å—Ç–∏ –∞–ª–º–∞–∑—ã –Ω–∞ —ç—Ç—É –∫–∞—Ä—Ç—É",
                ),
            )
            return False
        status, error_message = await bank.transfer(
            token=project.plasmo_bearer_token,
            from_card=from_card,
            to_card=user_card,
            amount=amount,
            message=transaction_message,
        )
        if not status:
            await interaction.edit_original_message(
                embed=disnake.Embed(
                    color=disnake.Color.red(),
                    title="–û—à–∏–±–∫–∞",
                    description="API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É: **" + error_message + "**",
                ),
            )
            return False
        await interaction.edit_original_message(
            embed=disnake.Embed(
                color=disnake.Color.yellow(),
                description="–û—Ç–ø—Ä–∞–≤–ª—è—é –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ...",
            )
        )

        embed = disnake.Embed(
            color=disnake.Color.green(),
            description=f"{user.mention} –ø–æ–ª—É—á–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ **{amount}** –∞–ª–º. ",
        ).set_author(
            name=plasmo_user.display_name,
            icon_url="https://rp.plo.su/avatar/" + plasmo_user.display_name,
        )
        if message != "":
            embed.add_field(name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", value=message)

        async with ClientSession() as session:
            webhook = disnake.Webhook.from_url(project.webhook_url, session=session)
            try:
                await webhook.send(
                    content=user.mention,
                    embed=embed,
                )
            except disnake.errors.NotFound:
                await interaction.edit_original_message(
                    embed=disnake.Embed(
                        color=disnake.Color.red(),
                        title="–û—à–∏–±–∫–∞",
                        description="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±—Ö—É–∫—É. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –∏–≥—Ä–æ–∫ –Ω–µ –±—ã–ª –æ–ø–æ–≤–µ—â–µ–Ω",
                    ),
                )

        await self.bot.get_channel(guild.logs_channel_id).send(
            embed=embed.add_field("–í—ã–ø–ª–∞—Ç–∏–ª", interaction.author.mention, inline=False)
            .add_field(
                name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É", value=transaction_message, inline=False
            )
            .add_field("–ü—Ä–æ–µ–∫—Ç", project.name, inline=False)
            .add_field("–° –∫–∞—Ä—Ç—ã", formatters.format_bank_card(from_card), inline=False)
            .add_field(
                "–ù–∞ –∫–∞—Ä—Ç—É",
                formatters.format_bank_card(user_card),
                inline=False,
            )
        )

        await interaction.edit_original_message(
            embed=disnake.Embed(
                color=disnake.Color.green(),
                title="–£—Å–ø–µ—Ö",
                description=f"{user.mention} –ø–æ–ª—É—á–∏–ª –≤—ã–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ **{amount}** {settings.Emojis.diamond} –Ω–∞ "
                f"–∫–∞—Ä—Ç—É {formatters.format_bank_card(user_card)}",
            ),
        )
        # todo: save failed payments and retry them later
        await database.payouts.register_payout_entry(
            project_id=project.id,
            user_id=user.id,
            amount=amount,
            message=message,
            from_card=from_card,
            to_card=user_card,
            is_payed=True,
        )
        await self.bot.get_channel(settings.DevServer.transactions_channel_id).send(
            embed=disnake.Embed(
                description=f"{formatters.format_bank_card(from_card)} -> "
                f"{amount} {settings.Emojis.diamond} -> "
                f"{formatters.format_bank_card(user_card)}\n"
                f" {message}",
            )
        )
        return True

    @commands.guild_only()
    @commands.slash_command(
        dm_permission=False,
    )
    @checks.blocked_users_slash_command_check()
    @commands.default_member_permissions(administrator=True)
    async def payout_command(
        self,
        inter: ApplicationCommandInteraction,
        user: disnake.Member = commands.Param(),
        amount: int = commands.Param(),
        project: str = commands.Param(
            autocomplete=payouts_projects_autocompleter,
        ),
        message: str = commands.Param(),
    ):
        """
        Payout diamonds to player {{PAYOUT_COMMAND}}

        Parameters
        ----------
        inter
        user: Player to pay {{PAYOUT_PLAYER}}
        amount: Amount of diamonds to payout {{PAYOUT_AMOUNT}}
        project: Payout project {{PAYOUT_PROJECT}}
        message: Comment to payout {{PAYOUT_MESSAGE}}
        """
        await inter.response.defer(ephemeral=True)
        try:
            db_project = await projects_db.get_project(int(project))
            if db_project is None:
                raise ValueError("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            if db_project.guild_discord_id != inter.guild.id:
                await inter.edit_original_message(
                    embed=disnake.Embed(
                        color=disnake.Color.red(),
                        title="–û—à–∏–±–∫–∞",
                        description="–ü—Ä–æ–µ–∫—Ç –Ω–µ –ø—Ä–∏–Ω–∞–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Å–µ—Ä–≤–µ—Ä—É",
                    ),
                )
                return
        except ValueError:
            await inter.edit_original_message(
                embed=disnake.Embed(
                    color=disnake.Color.red(),
                    title="–û—à–∏–±–∫–∞",
                    description="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                ),
            )
            return
        await self.payout(inter, user, amount, db_project, message)

    @commands.slash_command()
    @checks.blocked_users_slash_command_check()
    async def set_saved_card(
        self,
        inter: disnake.ApplicationCommandInteraction,
        card: str = commands.Param(
            autocomplete=search_bank_cards_autocompleter,
        ),
    ):
        """
        Set up your card for payouts {{SET_PAYOUTS_CARD_COMMAND}}

        Parameters
        ----------
        inter
        card: Card number, format: 9000 or EB-9000. EB-0142 -> 142. EB-3666 -> 3666 {{SET_PAYOUTS_CARD_PARAM}}
        """
        await inter.response.defer(ephemeral=True)
        try:
            card_id = int(card.replace(" ", "").replace("EB-", "").replace("–ï–í-", ""))
            if card_id < 0 or card_id > 9999:
                raise ValueError
        except ValueError:
            await inter.edit_original_message(
                embed=disnake.Embed(
                    color=disnake.Color.red(),
                    title="–û—à–∏–±–∫–∞",
                    description="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã",
                ),
            )
            return

        await inter.edit_original_message(
            embed=disnake.Embed(
                color=disnake.Color.yellow(), description="–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–µ..."
            )
        )

        api_card = await api.bank.get_card_data(card_id)
        if api_card is None:
            await inter.edit_original_message(
                embed=disnake.Embed(
                    color=disnake.Color.red(),
                    title="–û—à–∏–±–∫–∞",
                    description="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–µ",
                ),
            )
            return

        await database.payouts.set_saved_card(
            user_id=inter.author.id,
            card_id=card_id,
        )
        await inter.edit_original_message(
            embed=disnake.Embed(
                color=disnake.Color.green(),
                title="–£—Å–ø–µ—Ö",
                description="–ö–∞—Ä—Ç–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
                f" {formatters.format_bank_card(card_id)} - {api_card['name']}\n"
                f"–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç {api_card['holder']}",
            ),
        )

    async def cog_load(self):
        logger.info("%s Ready", __name__)


def setup(bot: disnake.ext.commands.Bot):
    """
    Disnake internal setup function
    """
    bot.add_cog(Payouts(bot))
