import asyncio
import datetime
import logging
import re
from typing import List, Optional

import disnake
from disnake import (ApplicationCommandInteraction, GuildCommandInteraction,
                     Localized, MessageInteraction)
from disnake.ext import commands

from plasmotools import formatters, models, settings
from plasmotools.cogs.error_handler import BankAPIError
from plasmotools.embeds import build_simple_embed
from plasmotools.plasmo_api import bank as bank_api
from plasmotools.plasmo_api.messenger import send_mc_message

logger = logging.getLogger(__name__)


# note: –≠—Ç–æ –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π –ø—Ä–∏–∫–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤ —Ç–µ–æ—Ä–∏–∏ –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –∫—É—á—É –º–∏–∫—Ä–æ—Ñ—É–Ω–∫—Ü–∏–π, –Ω–æ —è –Ω–µ –≤–∏–∂—É
# –≤ —ç—Ç–æ–º –∫–∞–∫ —Ç–∞–∫–æ–≤–æ–≥–æ —Å–º—ã—Å–ª–∞


class PatentTypeView(disnake.ui.View):
    def __init__(
        self,
    ):
        super().__init__(timeout=600)
        self.is_mapart = None

    @disnake.ui.button(label="–ú–∞–ø–∞—Ä—Ç", style=disnake.ButtonStyle.green, emoji="üóæ")
    async def mapart_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        self.is_mapart = True
        await interaction.response.defer(ephemeral=True)
        self.stop()

    @disnake.ui.button(label="–î—Ä—É–≥–æ–µ", style=disnake.ButtonStyle.green, emoji="üí°")
    async def other_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        self.is_mapart = False
        await interaction.response.defer(ephemeral=True)
        self.stop()

    @disnake.ui.button(
        label="–û—Ç–º–µ–Ω–∏—Ç—å", style=disnake.ButtonStyle.gray, emoji="‚ùå", row=1
    )
    async def cancel_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        self.is_mapart = None
        await interaction.response.send_message(
            embed=build_simple_embed("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"), ephemeral=True
        )
        self.stop()

    async def on_timeout(self) -> None:
        self.stop()


class MapsCountView(disnake.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=1200)
        self.bot = bot
        self.maps_count = None

    @disnake.ui.button(style=disnake.ButtonStyle.green, emoji="1Ô∏è‚É£")
    async def one_map_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        await interaction.response.defer(ephemeral=True)
        self.maps_count = 1
        self.stop()

    @disnake.ui.button(style=disnake.ButtonStyle.green, emoji="2Ô∏è‚É£")
    async def two_maps_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        await interaction.response.defer(ephemeral=True)
        self.maps_count = 2
        self.stop()

    @disnake.ui.button(style=disnake.ButtonStyle.green, emoji="4Ô∏è‚É£")
    async def four_maps_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        await interaction.response.defer(ephemeral=True)
        self.maps_count = 4
        self.stop()

    @disnake.ui.button(style=disnake.ButtonStyle.green, emoji="6Ô∏è‚É£")
    async def six_maps_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        await interaction.response.defer(ephemeral=True)
        self.maps_count = 6
        self.stop()

    @disnake.ui.button(
        label="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", style=disnake.ButtonStyle.green, emoji="‚úèÔ∏è", row=0
    )
    async def specify_count_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        await interaction.response.send_modal(
            title="–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞",
            custom_id="specify_maps_count_modal",
            components=[
                disnake.ui.TextInput(
                    label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç",
                    placeholder="2",
                    custom_id="map_count",
                    style=disnake.TextInputStyle.short,
                    min_length=1,
                    max_length=3,
                ),
            ],
        )

        try:
            modal_inter: disnake.ModalInteraction = await self.bot.wait_for(
                "modal_submit",
                check=lambda i: i.custom_id == "specify_maps_count_modal"
                and i.author.id == interaction.author.id,
                timeout=600,
            )
        except asyncio.TimeoutError:
            self.maps_count = None
            self.stop()
            return

        await modal_inter.response.defer(ephemeral=True)

        if not modal_inter.text_values["map_count"].isdigit():
            await modal_inter.edit_original_message(
                embed=build_simple_embed(
                    "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç. –ü—Ä–∏–º–µ—Ä: `4`", failure=True
                )
            )
            await asyncio.sleep(5)
            return await modal_inter.delete_original_message()
        self.maps_count = int(modal_inter.text_values["map_count"])

        if self.maps_count < 0 or self.maps_count > 128:
            await modal_inter.edit_original_message(
                embed=build_simple_embed(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–æ–ª–∂–Ω–æ –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ `1-128`",
                    failure=True,
                )
            )
            await asyncio.sleep(5)
            return await modal_inter.delete_original_message()

        await modal_inter.delete_original_response()
        self.stop()

    @disnake.ui.button(
        label="–û—Ç–º–µ–Ω–∏—Ç—å", style=disnake.ButtonStyle.gray, emoji="‚ùå", row=1
    )
    async def cancel_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        self.maps_count = None
        await interaction.response.send_message(
            embed=build_simple_embed("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"), ephemeral=True
        )
        self.stop()

    async def on_timeout(self) -> None:
        self.stop()


class ClientSelectView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=1200)
        self.client = None

    @disnake.ui.user_select(max_values=1)
    async def user_select(
        self, select: disnake.ui.UserSelect, interaction: disnake.MessageInteraction
    ):
        if len(select.values) != 1:
            await interaction.send(
                embed=build_simple_embed("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", failure=True),
                ephemeral=True,
            )
            await asyncio.sleep(5)
            return await interaction.delete_original_message()

        user = select.values[0]
        if user == interaction.author:
            await interaction.send(
                embed=build_simple_embed(
                    "–ù–µ–ª—å–∑—è –æ—Ñ–æ—Ä–º–ª—è—Ç—å –ø–∞—Ç–µ–Ω—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ", failure=True
                ),
                ephemeral=True,
            )
            await asyncio.sleep(5)
            return await interaction.delete_original_message()
        if user.bot:
            await interaction.send("https://imgur.com/FzWuyfU.mp4", ephemeral=True)
            await asyncio.sleep(5)
            return await interaction.delete_original_message()

        await interaction.response.defer(ephemeral=True)
        self.client = user
        self.stop()

    @disnake.ui.button(
        label="–û—Ç–º–µ–Ω–∏—Ç—å", style=disnake.ButtonStyle.gray, emoji="‚ùå", row=1
    )
    async def cancel(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        self.client = None
        await interaction.response.send_message(
            embed=build_simple_embed("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"), ephemeral=True
        )
        self.stop()

    async def on_timeout(self) -> None:
        self.client = None
        self.stop()


class ConfirmationView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=1200)
        self.decision = None

    @disnake.ui.button(
        label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", style=disnake.ButtonStyle.green, emoji="‚úÖ", row=0
    )
    async def confirm_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        await interaction.response.defer(ephemeral=True)
        self.decision = True
        self.stop()

    @disnake.ui.button(
        label="–û—Ç–º–µ–Ω–∏—Ç—å", style=disnake.ButtonStyle.gray, emoji="‚ùå", row=1
    )
    async def cancel_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        await interaction.response.send_message(
            embed=build_simple_embed("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"), ephemeral=True
        )
        self.decision = False
        self.stop()

    async def on_timeout(self) -> None:
        self.decision = False
        self.stop()


class PatentOwnersView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=1200)
        self.patent_owners = None

    @disnake.ui.user_select(
        max_values=16, min_values=1, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–∞—Ç–µ–Ω—Ç–∞", row=0
    )
    async def user_select(
        self, select: disnake.ui.UserSelect, interaction: disnake.MessageInteraction
    ):
        self.patent_owners = [user for user in select.values if not user.bot]
        if len(self.patent_owners) < 1:
            await interaction.send(
                embed=build_simple_embed(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ë–æ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞—é—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞",
                    failure=True,
                ),
                ephemeral=True,
            )
            await asyncio.sleep(5)
            return await interaction.delete_original_message()

        await interaction.send(
            embed=build_simple_embed(
                description="–í—ã–±—Ä–∞–Ω–æ:"
                + ", ".join([user.mention for user in self.patent_owners])
                + "\n\n–ù–∞–∂–º–∏—Ç–µ "
                "**‚úÖ –í—Å–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã –≤—ã–±—Ä–∞–Ω—ã**"
                " –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã –ø–∞—Ç–µ–Ω—Ç–∞",
                without_title=True,
            ),
            ephemeral=True,
        )

        await asyncio.sleep(5)
        return await interaction.delete_original_message()

    @disnake.ui.button(
        label="–í—Å–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã –≤—ã–±—Ä–∞–Ω—ã", style=disnake.ButtonStyle.green, emoji="‚úÖ", row=1
    )
    async def confirm(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        await interaction.response.defer(ephemeral=True)
        if len(self.patent_owners) < 1:
            await interaction.send(
                embed=build_simple_embed(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–∞—Ç–µ–Ω—Ç–∞", failure=True
                ),
                ephemeral=True,
            )
            await asyncio.sleep(3)
            return await interaction.delete_original_message()

        self.stop()

    @disnake.ui.button(
        label="–û—Ç–º–µ–Ω–∏—Ç—å", style=disnake.ButtonStyle.gray, emoji="‚ùå", row=2
    )
    async def cancel(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        self.patent_owners = None
        await interaction.response.send_message(
            embed=build_simple_embed("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"), ephemeral=True
        )
        self.stop()

    async def on_timeout(self) -> None:
        self.patent_owners = None
        self.stop()


class PatentNameView(disnake.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=1200)
        self.bot = bot
        self.patent_name = None

    @disnake.ui.button(
        label="–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ", style=disnake.ButtonStyle.green, emoji="‚úèÔ∏è", row=0
    )
    async def specify_name_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        await interaction.response.send_modal(
            title="–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞",
            custom_id="specify_name_modal",
            components=[
                disnake.ui.TextInput(
                    label="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞",
                    placeholder="–£—à–Ω–∏–µ –∫–∞–ø–ª–∏",
                    custom_id="patent_name",
                    style=disnake.TextInputStyle.short,
                    min_length=1,
                    max_length=64,
                ),
            ],
        )

        try:
            modal_inter: disnake.ModalInteraction = await self.bot.wait_for(
                "modal_submit",
                check=lambda i: i.custom_id == "specify_name_modal"
                and i.author.id == interaction.author.id,
                timeout=600,
            )
        except asyncio.TimeoutError:
            self.patent_name = None
            self.stop()
            return
        try:
            await modal_inter.response.defer(ephemeral=True)
        except disnake.HTTPException:
            return  # ????????
        self.patent_name = modal_inter.text_values["patent_name"]
        await modal_inter.delete_original_response()
        self.stop()

    @disnake.ui.button(
        label="–û—Ç–º–µ–Ω–∏—Ç—å", style=disnake.ButtonStyle.gray, emoji="‚ùå", row=1
    )
    async def cancel_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        self.patent_name = None
        await interaction.response.send_message(
            embed=build_simple_embed("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"), ephemeral=True
        )
        self.stop()

    async def on_timeout(self) -> None:
        self.stop()


class BankCardSelectionView(disnake.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=1200)
        self.bot = bot
        self.bank_code = "EB"
        self.card_id = None
        self.card_api_data = None

    @disnake.ui.button(
        label="–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", style=disnake.ButtonStyle.green, emoji="‚úèÔ∏è", row=0
    )
    async def specify_card_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        await interaction.response.send_modal(
            title="–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞",
            custom_id="specify_card_modal",
            components=[
                disnake.ui.TextInput(
                    label="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã",
                    placeholder="–ë–µ–∑ EB-",
                    custom_id="bank_card",
                    style=disnake.TextInputStyle.short,
                    min_length=1,
                    max_length=4,
                ),
            ],
        )

        try:
            modal_inter: disnake.ModalInteraction = await self.bot.wait_for(
                "modal_submit",
                check=lambda i: i.custom_id == "specify_card_modal"
                and i.author.id == interaction.author.id,
                timeout=600,
            )
        except asyncio.TimeoutError:
            self.stop()
            return
        try:
            await modal_inter.response.defer(ephemeral=True)
        except disnake.HTTPException:
            return  # ????????

        if not modal_inter.text_values["bank_card"].isdigit():
            await modal_inter.edit_original_message(
                embed=build_simple_embed(
                    "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä", failure=True
                ),
            )

            await asyncio.sleep(3)
            return await modal_inter.delete_original_response()

        self.card_id = int(modal_inter.text_values["bank_card"])

        if self.card_id < 1 or self.card_id > 9999:
            await modal_inter.response.send_message(
                embed=build_simple_embed(
                    "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 9999", failure=True
                ),
                ephemeral=True,
            )
            await asyncio.sleep(3)
            return await modal_inter.delete_original_response()

        api_card = await bank_api.get_card_data(
            card_str=formatters.format_bank_card(
                self.card_id, bank_prefix=self.bank_code
            ),
            supress_warnings=True,
        )
        if api_card is None:
            await modal_inter.edit_original_message(
                embed=build_simple_embed("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", failure=True),
            )
            await asyncio.sleep(5)
            await modal_inter.delete_original_response()
            return
        self.card_api_data = api_card

        await modal_inter.delete_original_response()
        self.stop()

    @disnake.ui.button(
        label="–û—Ç–º–µ–Ω–∏—Ç—å", style=disnake.ButtonStyle.gray, emoji="‚ùå", row=1
    )
    async def cancel_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        self.card_id = None
        await interaction.response.send_message(
            embed=build_simple_embed("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"), ephemeral=True
        )
        self.stop()

    async def on_timeout(self) -> None:
        self.stop()


class ConfirmOrDenyView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=1200)
        self.accepted = None

    @disnake.ui.button(
        label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", style=disnake.ButtonStyle.green, emoji="‚úÖ", row=0
    )
    async def confirm_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        await interaction.response.defer(ephemeral=True)

        self.accepted = True
        self.stop()

    @disnake.ui.button(
        label="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", style=disnake.ButtonStyle.gray, emoji="‚ùå", row=0
    )
    async def deny_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        await interaction.response.defer(ephemeral=True)

        self.accepted = False
        self.stop()

    async def on_timeout(self) -> None:
        self.stop()


class SpecifyMapNumberView(disnake.ui.View):
    def __init__(self, bot, map_index: int, selected_maps: List[int]):
        super().__init__(timeout=1200)
        self.map_index = map_index
        self.bot = bot
        self.map_number = None
        self.selected_maps = selected_maps
        self.specify_map_button.label = f"–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã {self.map_index}"

    @disnake.ui.button(style=disnake.ButtonStyle.green, emoji="‚úèÔ∏è", row=0)
    async def specify_map_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        await interaction.response.send_modal(
            title="–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞",
            custom_id="specify_map_number_modal",
            components=[
                disnake.ui.TextInput(
                    label="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã",
                    placeholder="–ë–µ–∑ #",
                    custom_id="map_number",
                    style=disnake.TextInputStyle.short,
                    min_length=1,
                    max_length=4,
                ),
            ],
        )

        try:
            modal_inter: disnake.ModalInteraction = await self.bot.wait_for(
                "modal_submit",
                check=lambda i: i.custom_id == "specify_map_number_modal"
                and i.author.id == interaction.author.id,
                timeout=600,
            )
        except asyncio.TimeoutError:
            self.map_number = None
            self.stop()
            return
        try:
            await modal_inter.response.defer(ephemeral=True)
        except disnake.HTTPException:
            return  # ????????

        if not modal_inter.text_values["map_number"].isdigit():
            await modal_inter.edit_original_message(
                embed=build_simple_embed(
                    "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä", failure=True
                ),
            )

            await asyncio.sleep(3)
            return await modal_inter.delete_original_response()

        self.map_number = int(modal_inter.text_values["map_number"])

        if self.map_number < 1:
            await modal_inter.response.send_message(
                embed=build_simple_embed(
                    "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1", failure=True
                ),
                ephemeral=True,
            )
            await asyncio.sleep(3)
            return await modal_inter.delete_original_response()

        if self.map_number in self.selected_maps:
            await modal_inter.edit_original_response(
                embed=build_simple_embed("–í—ã —É–∂–µ —É–∫–∞–∑–∞–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É", failure=True),
            )
            await asyncio.sleep(3)
            return await modal_inter.delete_original_response()

        await modal_inter.delete_original_response()
        self.stop()

    @disnake.ui.button(
        label="–û—Ç–º–µ–Ω–∏—Ç—å", style=disnake.ButtonStyle.gray, emoji="‚ùå", row=1
    )
    async def cancel_button(
        self, _: disnake.ui.Button, interaction: disnake.MessageInteraction
    ):
        self.map_number = None
        await interaction.response.send_message(
            embed=build_simple_embed("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"), ephemeral=True
        )
        self.stop()

    async def on_timeout(self) -> None:
        self.stop()


async def _get_patent_embed(
    patent_id: int, for_internal_use: bool = False
) -> disnake.Embed:
    db_patent = await models.Patent.objects.filter(id=patent_id).first()
    if db_patent is None:
        return build_simple_embed(
            f"–ü–∞—Ç–µ–Ω—Ç {formatters.format_patent_number(patent_id)} –Ω–µ –Ω–∞–π–¥–µ–Ω",
            failure=True,
        )

    if for_internal_use:
        patent_embed = disnake.Embed(
            title="–ü–∞—Ç–µ–Ω—Ç " + formatters.format_patent_number(patent_id),
            color=disnake.Color.yellow(),
        ).set_footer(text="–î–ª—è —Å–ª—É–∂–µ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        patent_embed.description = f"""\
`–°—É–±—ä–µ–∫—Ç:` {db_patent.subject}
`–¢–∏–ø:` {'–∞—Ä—Ç' if db_patent.is_art else '–¥—Ä—É–≥–æ–µ'}
`–ù–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç:` {', '.join([f'#{map_number}' for map_number in db_patent.map_ids.split(";")])
        if db_patent.map_ids else '–Ω–µ—Ç'}
`–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:` {'–ï—Å—Ç—å' if db_patent.is_lamination_skipped else '–ù–µ—Ç / –ù–µ –Ω—É–∂–Ω–æ'}
`–í–ª–∞–¥–µ–ª—å—Ü—ã:` {', '.join([f'<@{owner}>' for owner in db_patent.owner_ids.split(";")])}

`–ö–∞—Ä—Ç–∞ –æ–ø–ª–∞—Ç—ã:` {db_patent.from_card_str}
`–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω:` {db_patent.price_breakdown}
`–•–æ–ª–¥ –Ω–∞ –∫–∞—Ä—Ç–µ DD:` {db_patent.is_payment_on_hold}
`–û—Ñ–æ—Ä–º–ª–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç:` {db_patent.is_refunded}

`–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:`<t:{int(db_patent.registration_date.timestamp())}:f> 
`Message ID:` {('https://discord.com/channels/' + str(settings.economy_guild.discord_id)
                + '/' + str(settings.ECONOMY_PATENTS_PUBLIC_CHANNEL_ID) + '/' + str(db_patent.message_id))
        if db_patent.message_id else '–ù–µ—Ç'}

`–ë–∞–Ω–∫–∏—Ä:` <@{db_patent.banker_id}>
`–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:` {('<@' + str(db_patent.moderator_id) + '>') if db_patent.moderator_id else '–ù–µ—Ç'}
`–°—Ç–∞—Ç—É—Å:` **{db_patent.status}**               
        """
        return patent_embed

    if not for_internal_use:
        if db_patent.status in ["APPROVED", "AUTOAPPROVED"]:
            patent_color = disnake.Color.green()
        elif db_patent.status in "REJECTED":
            patent_color = disnake.Color.dark_red()
        else:
            patent_color = disnake.Color.dark_gray()

        patent_embed = disnake.Embed(
            title="–ü–∞—Ç–µ–Ω—Ç ‚Ññ" + formatters.format_patent_number(patent_id),
            color=patent_color,
        )

        patent_embed.description = f"`–°—É–±—ä–µ–∫—Ç:` {db_patent.subject}\n"
        if db_patent.is_art:
            if db_patent.map_ids is not None:
                map_numbers = [
                    ("#" + str(map_number))
                    for map_number in db_patent.map_ids.split(";")
                ]
            else:
                map_numbers = []
            if len(map_numbers) == 1:
                patent_embed.description += f"`–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:` {map_numbers[0]}\n"
            else:
                patent_embed.description += f"`–ù–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç:` {', '.join(map_numbers)}\n"

        patent_embed.description += "\n"

        owner_ids = [owner for owner in db_patent.owner_ids.split(";")]
        if len(owner_ids) == 1:
            patent_embed.description += f"`–í–ª–∞–¥–µ–ª–µ—Ü:` <@{owner_ids[0]}>\n"
        else:
            patent_embed.description += (
                f"`–í–ª–∞–¥–µ–ª—å—Ü—ã:` {', '.join([f'<@{owner}>' for owner in owner_ids])}\n"
            )

        patent_statuses = {
            "WAIT": "‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è",
            "APPROVED": "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω",
            "REJECTED": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω",
            "AUTOAPPROVED": "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω",
        }
        patent_embed.description += f"\n**{patent_statuses[db_patent.status]}**\n"

        return patent_embed


class BankerPatents(commands.Cog):
    def __init__(self, bot: disnake.ext.commands.Bot):
        self.bot = bot

    @commands.default_member_permissions(administrator=True)
    @commands.slash_command(
        name="patent",
        dm_permission=False,
        guild_ids=[
            settings.PlasmoRPGuild.guild_id,
            settings.DevServer.guild_id,
            settings.economy_guild.discord_id,
        ],
    )
    async def patent_slash_command(self, inter: ApplicationCommandInteraction):
        """
        Start registering new patent  {{PATENT_COMMAND}}
        """
        await inter.response.defer(ephemeral=True)
        patent_preview_embed = disnake.Embed(
            title="–ü–∞—Ç–µ–Ω—Ç XXXX",
            description=f"`–ë–∞–Ω–∫–∏—Ä:`{inter.author.mention}",
            color=disnake.Color.yellow(),
        ).set_footer(text="–ü—Ä–µ–≤—å—é")

        # –í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
        patent_helper_embed = disnake.Embed(
            color=disnake.Color.dark_green(),
        )
        patent_helper_embed.title = "–í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞"
        patent_helper_embed.description = """
–£–∫–∞–∂–∏—Ç–µ –¥–∏—Å–∫–æ—Ä–¥ –∞–∫–∫–∞—É–Ω—Ç **–ö–õ–ò–ï–ù–¢–ê**. 

–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª –æ—Ñ–æ—Ä–º–ª—è—Ç—å –ø–∞—Ç–µ–Ω—Ç, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ –∫—Ç–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω \
–∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞
"""
        if inter.guild_id != settings.PlasmoRPGuild.guild_id:
            patent_helper_embed.description += (
                "\n\n"
                "‚ö†Ô∏è**–í—ã –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –ø–∞—Ç–µ–Ω—Ç –Ω–µ –≤ –¥–∏—Å–∫–æ—Ä–¥–µ Plasmo. –ö–ª–∏–µ–Ω—Ç–∞ –º–æ–∂–µ—Ç –Ω–µ"
                " –±—ã—Ç—å –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ–≥–æ"
                " –≤—Ä—É—á–Ω—É—é**"
            )
        client_select_view = ClientSelectView()
        await inter.edit_original_message(
            embeds=[patent_preview_embed, patent_helper_embed],
            view=client_select_view,
        )
        await client_select_view.wait()
        if client_select_view.client is None:
            return await inter.delete_original_response()
        client: disnake.Member = client_select_view.client
        del client_select_view
        patent_preview_embed.description += f"\n`–ö–ª–∏–µ–Ω—Ç:`{client.mention}"

        # –¢–∏–ø –ø–∞—Ç–µ–Ω—Ç–∞
        patent_helper_embed.title = "–¢–∏–ø –ø–∞—Ç–µ–Ω—Ç–∞"
        patent_helper_embed.description = """\
–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç
```
–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–∏–ø: –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–∞—Ç–µ–Ω—Ç–æ–≤–∞—Ç—å –º–∞–ø–∞—Ä—Ç –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?
```
        
**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ç–µ–Ω—Ç–∞**
        """
        patent_type_view = PatentTypeView()
        await inter.edit_original_message(
            embeds=[patent_preview_embed, patent_helper_embed], view=patent_type_view
        )
        await patent_type_view.wait()
        if patent_type_view.is_mapart is None:
            return await inter.delete_original_response()
        is_mapart = patent_type_view.is_mapart
        del patent_type_view
        patent_preview_embed.description += (
            f"\n`–¢–∏–ø:` {'–ú–∞–ø–∞—Ä—Ç' if is_mapart else '–î—Ä—É–≥–æ–µ'}"
        )

        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–∞—Ç–µ–Ω—Ç–æ–≤
        patent_price_for_economy = 10
        patent_price_for_moderator = 5
        patent_price_for_banker = 10

        maps_count: Optional[int] = None
        # –î–ª—è –º–∞–ø–∞—Ä—Ç–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç, –∫–ª–∏–µ–Ω—Ç, –Ω–æ–º–µ—Ä–∞, –ø–µ—Ä–µ–¥–∞—á–∞ –∞—Ä—Ç–æ–≤ –±–∞–Ω–∫–∏—Ä—É, –Ω–∞–ª–∏—á–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞—Ä—Ç–æ–¥–µ–ª–∞
        if is_mapart:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∫–∞—Ä—Ç –Ω–∞ —Ä—É–∫–∞—Ö
            patent_helper_embed.title = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∫–∞—Ä—Ç"
            patent_helper_embed.description = """
            –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç.
            ```–ß—Ç–æ–±—ã –∑–∞–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞—Ç—å –∞—Ä—Ç, –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å —Å —Å–æ–±–æ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –≤—Å–µ—Ö –∫–∞—Ä—Ç. –û–Ω–∏ —Å–µ–π—á–∞—Å —É –≤–∞—Å –Ω–∞ —Ä—É–∫–∞—Ö?```

            **–£–∫–∞–∂–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞**"""
            patent_price_confirm_view = ConfirmationView()
            await inter.edit_original_message(
                embeds=[patent_preview_embed, patent_helper_embed],
                view=patent_price_confirm_view,
            )
            await patent_price_confirm_view.wait()
            if (
                patent_price_confirm_view.decision is None
                or patent_price_confirm_view.decision is False
            ):
                return await inter.delete_original_response()
            if not patent_price_confirm_view.decision:
                return await inter.delete_original_response()

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ –∞—Ä—Ç–µ
            patent_helper_embed.title = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ –∞—Ä—Ç–µ"
            patent_helper_embed.description = """

–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç
```
–¶–µ–Ω–∞ –∑–∞ –ø–∞—Ç–µ–Ω—Ç –Ω–∞ –º–∞–ø–∞—Ä—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç, —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –≤ –∞—Ä—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–∞—Ç–µ–Ω—Ç—É–µ—Ç–µ?
```

**–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç**
            """
            maps_count_view = MapsCountView(bot=self.bot)
            await inter.edit_original_message(
                embeds=[patent_preview_embed, patent_helper_embed], view=maps_count_view
            )
            await maps_count_view.wait()
            if maps_count_view.maps_count is None:
                return await inter.delete_original_response()
            maps_count = maps_count_view.maps_count
            del maps_count_view
            patent_preview_embed.description += f"\n`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç:` {maps_count}"

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
            patent_price_for_economy = 15
            patent_price_for_moderator = 0
            if maps_count < 3:
                patent_price_for_banker = 5
            elif maps_count < 6:
                patent_price_for_banker = 10
            elif maps_count < 11:
                patent_price_for_banker = 15
            else:
                patent_price_for_banker = 20

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞—Ä—Ç–æ–¥–µ–ª–∞
            has_license = False
            economy_guild = self.bot.get_guild(settings.economy_guild.discord_id)
            if not economy_guild:
                raise RuntimeError("Economy guild not found, unable to register patent")
            economy_guild_member = economy_guild.get_member(client.id)
            if economy_guild_member:
                economy_guild_license_role = economy_guild.get_role(
                    settings.ECONOMY_ARTODEL_LICENSE_ROLE_ID
                )
                if economy_guild_license_role in economy_guild_member.roles:
                    has_license = True
            patent_preview_embed.description += "\n`–õ–∏—Ü–µ–Ω–∑–∏—è –∞—Ä—Ç–æ–¥–µ–ª–∞:` " + (
                "–Ω–∞–π–¥–µ–Ω–∞" if has_license else "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
            if has_license:
                patent_price_for_economy -= 10
                patent_preview_embed.description += "\n`–°–∫–∏–¥–∫–∞ –ø–æ –ª–∏—Ü–µ–Ω–∑–∏–∏:` 10"

        patent_preview_embed.description += (
            f"\n`–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã:` E{patent_price_for_economy}"
            f"M{patent_price_for_moderator}B{patent_price_for_banker}"
        )
        total_patent_price = sum(
            [
                patent_price_for_economy,
                patent_price_for_moderator,
                patent_price_for_banker,
            ]
        )
        patent_preview_embed.description += "\n`–°—Ç–æ–∏–º–æ—Å—Ç—å:`" + str(total_patent_price)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã
        patent_helper_embed.title = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã"
        patent_helper_embed.description = f"""
–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç
```–¶–µ–Ω–∞ –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç \
{sum([patent_price_for_economy, patent_price_for_moderator, patent_price_for_banker])} –∞–ª–º. –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?```

**–£–∫–∞–∂–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞**"""
        patent_price_confirm_view = ConfirmationView()
        await inter.edit_original_message(
            embeds=[patent_preview_embed, patent_helper_embed],
            view=patent_price_confirm_view,
        )
        await patent_price_confirm_view.wait()
        if (
            patent_price_confirm_view.decision is None
            or patent_price_confirm_view.decision is False
        ):
            return await inter.delete_original_response()
        if not patent_price_confirm_view.decision:
            return await inter.delete_original_response()

        if is_mapart:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –Ω–∞ —Ä—É–∫–∏
            patent_helper_embed.title = "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç"
            patent_helper_embed.description = f"""
            –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç
            ```–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–¥–∞–π—Ç–µ –º–Ω–µ –≤—Å–µ —á–∞—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∞—Ä—Ç–∞```

            **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {maps_count} —à—Ç.**"""
            confirm_view = ConfirmationView()
            await inter.edit_original_message(
                embeds=[patent_preview_embed, patent_helper_embed], view=confirm_view
            )
            await confirm_view.wait()
            if confirm_view.decision is None or confirm_view.decision is False:
                return await inter.delete_original_response()

        # –£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        patent_helper_embed.title = "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞"
        if is_mapart:
            patent_helper_embed.description = """
–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç
```
–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–∞—Ç–µ–Ω—Ç—É–µ—Ç–µ?
```

‚ö†Ô∏è **–£—á—Ç–∏—Ç–µ —á—Ç–æ "–∞—Ä—Ç" –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ç–∞.**
`–ü—Ä–∏–º–µ—Ä:` –ê—Ä—Ç –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–µ–Ω –±–µ–∑ –ø–∏–≤–∞". –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ "–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –±–µ–∑ –ø–∏–≤–∞". \
–ü–∞—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è ¬´–∞—Ä—Ç "–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –±–µ–∑ –ø–∏–≤–∞"¬ª
    
**–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ç–∞**"""
        else:
            patent_helper_embed.description = """
–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç
```
–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –≤–∞—à –ø–∞—Ç–µ–Ω—Ç?
```

`–ü—Ä–∏–º–µ—Ä 1:` –ü–∞—Ç–µ–Ω—Ç –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–ü–∞—Ç–µ–Ω—Ç –Ω–∞ –∫–æ–º–∞—Ä–∞". –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å "–ö–æ–º–∞—Ä"
 
`–ü—Ä–∏–º–µ—Ä 2:` –ü–∞—Ç–µ–Ω—Ç –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–ü–∞—Ç–µ–Ω—Ç –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–∞–Ω–Ω–µ—Ä—ã –∏–∑ –±–∞–Ω–Ω–µ—Ä–æ–≤".\
 –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–æ–≤ –∏–∑ –±–∞–Ω–Ω–µ—Ä–æ–≤" 

**–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞**"""
        patent_name_view = PatentNameView(bot=self.bot)
        await inter.edit_original_message(
            embeds=[patent_preview_embed, patent_helper_embed],
            view=patent_name_view,
        )
        await patent_name_view.wait()
        if patent_name_view.patent_name is None:
            return await inter.delete_original_response()
        if is_mapart:
            patent_name = f'–∞—Ä—Ç "{patent_name_view.patent_name}"'
        else:
            patent_name = patent_name_view.patent_name
        del patent_name_view
        patent_preview_embed.description = (
            f"`–°—É–±—ä–µ–∫—Ç:` {patent_name}\n" + patent_preview_embed.description
        )

        # –í—ã–±–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        patent_helper_embed.title = "–í—ã–±–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤"
        patent_helper_embed.description = """
–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç
```–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–∞—Ç–µ–Ω—Ç–∞. –°–≤–æ–π –Ω–∏–∫ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ.\
 –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ—Ç –æ–¥–Ω–æ–≥–æ –¥–æ 16 –∏–≥—Ä–æ–∫–æ–≤```

–ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!

**–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–∞—Ç–µ–Ω—Ç–∞ –≤ —Å–µ–ª–µ–∫—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–∏—Ç—å –≤—ã–±–æ—Ä**"""
        if inter.guild_id != settings.PlasmoRPGuild.guild_id:
            patent_helper_embed.description += (
                "\n\n"
                "‚ö†Ô∏è**–í—ã –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –ø–∞—Ç–µ–Ω—Ç –Ω–µ –≤ –¥–∏—Å–∫–æ—Ä–¥–µ Plasmo. –í–ª–∞–¥–µ–ª—å—Ü–µ–≤ –º–æ–∂–µ—Ç –Ω–µ"
                " –±—ã—Ç—å –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏—Ö"
                " –≤—Ä—É—á–Ω—É—é**"
            )
        patent_owners_view = PatentOwnersView()
        await inter.edit_original_message(
            embeds=[patent_preview_embed, patent_helper_embed],
            view=patent_owners_view,
        )
        await patent_owners_view.wait()
        if patent_owners_view.patent_owners is None:
            return await inter.delete_original_response()
        patent_owners = patent_owners_view.patent_owners
        del patent_owners_view
        patent_preview_embed.description += (
            "\n`–í–ª–∞–¥–µ–ª"
            + ("–µ—Ü" if len(patent_owners) == 1 else "—å—Ü—ã")
            + ":` "
            + ", ".join([user.mention for user in patent_owners])
        )

        # –í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã
        patent_helper_embed.title = "–°—Ç–∞–¥–∏—è –æ–ø–ª–∞—Ç—ã"
        patent_helper_embed.description = """
–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç
```–ù—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞. –ù–∞ –∫–∞–∫—É—é –∫–∞—Ä—Ç—É –≤–∞–º –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç?```

**‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã –ï-–ë–∞–Ω–∫–∞**
`–ü—Ä–∏–º–µ—Ä 1:` –ö–∞—Ä—Ç–∞ EB-5930, –≤—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ 5930
`–ü—Ä–∏–º–µ—Ä 2:` –ö–∞—Ä—Ç–∞ EB-0004, –≤—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ 4 –∏–ª–∏ 0004

**–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —É–∫–∞–∑–∞–ª –∫–ª–∏–µ–Ω—Ç **"""
        bank_card_selection_view = BankCardSelectionView(bot=self.bot)
        await inter.edit_original_message(
            embeds=[patent_preview_embed, patent_helper_embed],
            view=bank_card_selection_view,
        )
        await bank_card_selection_view.wait()
        if bank_card_selection_view.card_id is None:
            return await inter.delete_original_response()
        card_number = bank_card_selection_view.card_id
        card_bank = bank_card_selection_view.bank_code
        card_api_data = bank_card_selection_view.card_api_data
        del bank_card_selection_view

        patents_payout_project = await models.StructureProject.objects.filter(
            name="–ü–∞—Ç–µ–Ω—Ç—ã",
            guild_discord_id=settings.economy_guild.discord_id,
            from_card_str=settings.DD_BANK_PATENTS_CARD,
        ).first()
        if patents_payout_project is None:
            await self.bot.get_channel(settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID).send(
                embed=build_simple_embed(
                    description="Unable to get project for payout", failure=True
                )
            )
            raise RuntimeError("Unable to get project for payout")

        await inter.edit_original_response(components=[])
        # todo: –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞

        # –û–ø–ª–∞—Ç–∞
        try:
            bill_id = await bank_api.bill(
                from_card_str=settings.DD_BANK_PATENTS_CARD,
                to_card_str=formatters.format_bank_card(
                    card_api_data["id"], bank_prefix=card_bank
                ),
                amount=total_patent_price,
                message=f"–û–ø–ª–∞—Ç–∞ –ø–∞—Ç–µ–Ω—Ç–∞ –Ω–∞ {patent_name}. –ë–∞–Ω–∫–∏—Ä {inter.author.display_name}",
                token=patents_payout_project.plasmo_bearer_token,
            )
        except BankAPIError as e:
            await inter.edit_original_message(
                embeds=[
                    patent_preview_embed,
                    build_simple_embed(
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –ø–∞—Ç–µ–Ω—Ç–∞:"
                        + str(e),
                        failure=True,
                    ),
                ]
            )
            return await self.bot.get_channel(
                settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID
            ).send(
                embed=disnake.Embed(
                    description=f"{formatters.format_bank_card(number=4, bank_prefix='DD')}"
                    f" -> {formatters.format_bank_card(number=card_number, bank_prefix=card_bank)}\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç. –û—à–∏–±–∫–∞: {e}\n"
                )
            )

        if bill_id is None:
            return await inter.edit_original_message(
                embeds=[
                    patent_preview_embed,
                    build_simple_embed(
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –ø–∞—Ç–µ–Ω—Ç–∞",
                        failure=True,
                    ),
                ]
            )
        await self.bot.get_channel(settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID).send(
            embed=disnake.Embed(
                description=f"{settings.DD_BANK_PATENTS_CARD}"
                f" -> {formatters.format_bank_card(number=card_number, bank_prefix=card_bank)}\n"
                f"–°—á–µ—Ç {bill_id} –Ω–∞ {total_patent_price} –∞–ª–º. –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É {card_number}\n"
                f"`–ë–∞–Ω–∫–∏—Ä:` {inter.author.mention}\n`–ö–ª–∏–µ–Ω—Ç:` {client.mention}\n"
                f"`–°–æ–æ–±—â–µ–Ω–∏–µ:` "
                + f"–û–ø–ª–∞—Ç–∞ –ø–∞—Ç–µ–Ω—Ç–∞ –Ω–∞ {patent_name}. –ë–∞–Ω–∫–∏—Ä {inter.author.display_name}"
            )
        )
        patent_helper_embed.description = f"""–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç
```DD Bank –≤—ã—Å—Ç–∞–≤–∏–ª –Ω–∞ –∫–∞—Ä—Ç—É \
{formatters.format_bank_card(number=card_api_data['id'], bank_prefix=card_api_data['bank_code'])} \
—Å—á–µ—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ {total_patent_price} –∞–ª–º. \
–£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ```

**–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...**"""
        await inter.edit_original_message(
            embeds=[patent_preview_embed, patent_helper_embed], components=[]
        )
        is_paid, bill_declined = await bank_api.wait_for_bill(
            card_str=settings.DD_BANK_PATENTS_CARD,
            bill_id=bill_id,
            token=patents_payout_project.plasmo_bearer_token,
            time=300,
        )
        if bill_declined:
            await inter.edit_original_message(
                embeds=[
                    patent_preview_embed,
                    build_simple_embed(
                        "–°—á–µ—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –ø–∞—Ç–µ–Ω—Ç–∞",
                        failure=True,
                    ),
                ]
            )
            return await self.bot.get_channel(
                settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID
            ).send(embed=disnake.Embed(description=f"–°—á–µ—Ç {bill_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω"))
        if not is_paid:
            await inter.edit_original_message(
                embeds=[
                    patent_preview_embed,
                    build_simple_embed(
                        "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –ø–∞—Ç–µ–Ω—Ç–∞",
                        failure=True,
                    ),
                ]
            )
            await self.bot.get_channel(settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID).send(
                embed=disnake.Embed(
                    description=f"–°—á–µ—Ç {bill_id} –∏—Å—Ç–µ–∫ –∏–ª–∏ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω DD –±–∞–Ω–∫–æ–º –≤—Ä—É—á–Ω—É—é"
                )
            )
            return await bank_api.cancel_bill(
                card_str=settings.DD_BANK_PATENTS_CARD,
                bill_id=bill_id,
                token=patents_payout_project.plasmo_bearer_token,
            )
        await self.bot.get_channel(settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID).send(
            embed=disnake.Embed(
                description=f"–°—á–µ—Ç {bill_id} –Ω–∞ {total_patent_price} –∞–ª–º. –æ–ø–ª–∞—á–µ–Ω"
            )
        )
        patent_helper_embed.description = """–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç
```–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞. –í–∞—à –ø–∞—Ç–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è```

**–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø–∞–¥–µ—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...**"""
        await inter.edit_original_message(
            embeds=[patent_preview_embed, patent_helper_embed], components=[]
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_patent = await models.Patent.objects.create(
            subject=patent_name,
            is_art=is_mapart,
            owner_ids=";".join([str(owner.id) for owner in patent_owners]),
            registration_date=datetime.datetime.now(),
            banker_id=inter.author.id,
            status="WAIT",
            moderator_id=self.bot.user.id if is_mapart else None,
            message_id=None,
            price_breakdown=f"{patent_price_for_economy};{patent_price_for_moderator};{patent_price_for_banker}",
            is_payment_on_hold=True,
            from_card_str=formatters.format_bank_card(
                number=card_number, bank_prefix=card_bank
            ),
        )
        for owner in patent_owners:
            await send_mc_message(
                message=f"–ù–∞ –≤–∞—à–µ –∏–º—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ç–µ–Ω—Ç {db_patent.id} - {db_patent.subject}",
                discord_id=owner.id,
                even_if_offline=False,
            )
        await self.bot.get_channel(settings.ECONOMY_PATENTS_NUMBERS_CHANNEL_ID).send(
            formatters.format_patent_number(db_patent.id)
        )
        await asyncio.sleep(10)

        patent_preview_embed.title = "–ü–∞—Ç–µ–Ω—Ç " + formatters.format_patent_number(
            db_patent.id
        )
        patent_preview_embed.description += "\n`–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:` –æ–ø–ª–∞—á–µ–Ω–æ"

        is_map_lamination_skipped = None
        map_numbers = []
        if is_mapart:
            # –õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç
            patent_helper_embed.title = "–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç"
            patent_helper_embed.description = """–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç
```–ü–∞—Ç–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–∞—à –∞—Ä—Ç –º–æ–∂–Ω–æ –∑–∞–ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å. –õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–∞ –¥–æ–±–∞–≤–∏—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç –Ω–æ–º–µ—Ä \
–ø–∞—Ç–µ–Ω—Ç–∞ –∏ —É–±–µ—Ä–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ø–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ –∫–∞—Ä—Ç. => –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–º–µ–ª–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∫–æ–ø–∏–∏ –∞—Ä—Ç–∞ –∏ –Ω–∏–∫—Ç–æ –Ω–µ \
—Å–º–æ–∂–µ—Ç –∏—Ö —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. –õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∞—Ä—Ç?``` 

**–£–∫–∞–∂–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞**
   """
            aproval_view = ConfirmOrDenyView()
            await inter.edit_original_message(
                embeds=[patent_preview_embed, patent_helper_embed],
                view=aproval_view,
            )
            await aproval_view.wait()
            if aproval_view.accepted is True:
                is_map_lamination_skipped = False
                patent_preview_embed.description += (
                    "\n`–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:` –µ—Å—Ç—å"
                )
                mc_command_owner = "PlasmoTools"
                laminated_map_numbers = []
                for _ in range(maps_count):
                    patent_helper_embed.description = f"""–ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ –≤–æ–∑—å–º–∏—Ç–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ä—É–∫—É –≤—Å–µ —á–∞—Å—Ç–∏ –∞—Ä—Ç–∞ \
–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç–µ –∏–≥—Ä—ã

–ö–æ–º–∞–Ω–¥–∞: `/patent {mc_command_owner} {db_patent.id}`

–ó–∞–ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã: **{', '.join('#' + str(map_number) for map_number in laminated_map_numbers)
                    if laminated_map_numbers else '–Ω–µ'}**

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–π–º–µ—Ç –∫–æ–≥–¥–∞ –≤—ã –∑–∞–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–ª–∏ –∫–∞—Ä—Ç—É –∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –≤–∞—Å 
**–£ –≤–∞—Å 180 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É, –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ –ª–∞–º–∏–Ω–∞—Ü–∏—è –∫–∞—Ä—Ç –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞**"""
                    await inter.edit_original_message(
                        embeds=[patent_preview_embed, patent_helper_embed],
                        view=None,
                    )

                    def patent_registration_message_check(message: disnake.Message):
                        if message.channel.id not in [
                            1137803532943233154,
                            951769772683587604,
                        ] or (
                            len(message.embeds) != 1
                            or message.embeds[0].description is None
                        ):
                            return False
                        results = re.findall(
                            r"<@!?(\d+)> –∑–∞–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–ª –∫–∞—Ä—Ç—É #([0-9]{1,5}) –≤ ([a-zA-Z_]+) "
                            r"\(–ø–∞—Ç–µ–Ω—Ç #([0-9]{1,5}), –≤–ª–∞–¥–µ–ª–µ—Ü: <@!?(\d+)>\)",
                            message.embeds[0].description,
                        )
                        if len(results) != 1:
                            return False
                        if results[0][3] != formatters.format_patent_number(
                            db_patent.id
                        ):
                            return False

                        if int(results[0][1]) in laminated_map_numbers:
                            return False

                        # result[0]: banker_id, card_number, world_name, patent_id, owner_id
                        laminated_map_numbers.append(int(results[0][1]))
                        return True

                    try:
                        await self.bot.wait_for(
                            "message",
                            check=patent_registration_message_check,
                            timeout=180,
                        )
                        continue
                    except asyncio.TimeoutError:
                        is_map_lamination_skipped = True
                        patent_preview_embed.description += (
                            "\n`–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                        )
                        break
                map_numbers = laminated_map_numbers
                patent_helper_embed.description = """–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç
```–í—Å–µ –∫–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∏—Ö. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è \
–≤–µ—Ä—Å–∏—è –≤–∞—à–µ–≥–æ –ø–∞—Ç–µ–Ω—Ç–∞, –≤ –≤–∏–¥–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π –≥–ª–∞–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∫–Ω–∏–≥–∏, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–∏–∫–µ—Ç—ã –≤ –¥–∏—Å–∫–æ—Ä–¥–µ \
—Å—Ç—Ä—É–∫—Ç—É—Ä—ã```
 
 
 **–ü–∞—Ç–µ–Ω—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω. –û—Ç–¥–∞–π—Ç–µ –≤—Å–µ —á–∞—Å—Ç–∏ –º–∞–ø–∞—Ä—Ç–∞. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞**"""
            else:
                is_map_lamination_skipped = True
                patent_preview_embed.description += (
                    "\n`–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                )

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç
                patent_helper_embed.title = "–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç"
                for _ in range(maps_count):
                    patent_helper_embed.description = f"""
                            –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ.

                            –í–≤–µ–¥–µ–Ω–æ {len(map_numbers)} / {maps_count}

                            –£–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã: {', '.join(map(str, map_numbers)) if map_numbers else '–Ω–µ—Ç'}

                            **–ù–∞–∂–∏–º–∞–π—Ç–µ '–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã N' –∏ –≤–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É**"""
                    specify_card_number_view = SpecifyMapNumberView(
                        map_index=len(map_numbers) + 1,
                        bot=self.bot,
                        selected_maps=map_numbers,
                    )
                    await inter.edit_original_message(
                        embeds=[patent_preview_embed, patent_helper_embed],
                        view=specify_card_number_view,
                    )
                    await specify_card_number_view.wait()
                    if specify_card_number_view.map_number is None:
                        return await inter.delete_original_response()
                    map_numbers.append(specify_card_number_view.map_number)
                    del specify_card_number_view
                patent_helper_embed.description = """–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç
```–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –≤–∞—à–µ–≥–æ –ø–∞—Ç–µ–Ω—Ç–∞, –≤ –≤–∏–¥–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π –≥–ª–∞–≤–æ–π \
—ç–∫–æ–Ω–æ–º–∏–∫–∏ –∫–Ω–∏–≥–∏, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–∏–∫–µ—Ç—ã –≤ –¥–∏—Å–∫–æ—Ä–¥–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã```

**–ü–∞—Ç–µ–Ω—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞**"""
            patent_preview_embed.description += (
                f"\n`–ù–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç:` {', '.join(map(str, map_numbers))}"
            )
        else:
            patent_helper_embed.description = """–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç
```–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à –ø–∞—Ç–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –†–µ—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏ \
–º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–∑–Ω–∞—Ç—å –≤ –¥–∏—Å–∫–æ—Ä–¥–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: https://discord.gg/6sKKGPuhRk```

**–ü–∞—Ç–µ–Ω—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞**"""

        patent_helper_embed.title = "–ü–∞—Ç–µ–Ω—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω"
        await inter.edit_original_message(
            embeds=[patent_preview_embed, patent_helper_embed],
            view=None,
        )
        await models.Patent.objects.filter(id=db_patent.id).update(
            is_lamination_skipped=is_map_lamination_skipped,
            map_ids=";".join([str(map_number) for map_number in map_numbers])
            if is_mapart
            else None,
        )

        await self._moderate_patent(patent_id=db_patent.id)

    @commands.message_command(
        name=Localized("Reject Patent", key="REJECT_PATENT_MESSAGE_COMMAND_NAME"),
        guild_ids=[settings.economy_guild.discord_id],
    )
    @commands.default_member_permissions(administrator=True)
    async def reject_patent_message_command(
        self, inter: MessageInteraction, message: disnake.Message
    ):
        await inter.response.defer(ephemeral=True)
        if (
            message.channel.id != settings.ECONOMY_PATENTS_PUBLIC_CHANNEL_ID
            or message.author.id != self.bot.user.id
        ):
            await inter.edit_original_response(
                embed=build_simple_embed(
                    description="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ç–µ–Ω—Ç", failure=True
                ),
            )
            return

        db_patent = await models.Patent.objects.filter(message_id=message.id).first()
        if db_patent is None:
            return await inter.edit_original_response(
                embed=build_simple_embed(description="–ü–∞—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", failure=True),
            )

        if db_patent.status == "REJECTED":
            return await inter.edit_original_response(
                embed=build_simple_embed(
                    description="–ü–∞—Ç–µ–Ω—Ç —É–∂–µ –æ—Ç–∫–ª–æ–Ω—ë–Ω", failure=True
                ),
            )
        await models.Patent.objects.filter(id=db_patent.id).update(
            status="REJECTED",
            moderator_id=inter.author.id,
        )
        await self.bot.get_channel(settings.ECONOMY_PATENTS_MODERATOR_CHANNEL_ID).send(
            embeds=[
                await _get_patent_embed(patent_id=db_patent.id, for_internal_use=True),
                build_simple_embed(
                    description=f"–ü–∞—Ç–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é –æ—Ç–∫–ª–æ–Ω—ë–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {inter.author.mention}\n"
                    f"–§–∏—á–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–≥ –∑–∞ —Ç–∞–∫–∏–µ –æ—Ç–º–µ–Ω—ã –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞"
                ),
            ],
        )
        await message.edit(
            embed=await _get_patent_embed(
                patent_id=db_patent.id, for_internal_use=False
            ),
        )
        await inter.edit_original_response(
            embed=build_simple_embed(description="–ü–∞—Ç–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω"),
        )

    async def _moderate_patent(self, patent_id: int):
        db_patent = await models.Patent.objects.get(id=patent_id)
        if db_patent.status != "WAIT":
            return False

        if db_patent.is_art:
            await models.Patent.objects.filter(id=db_patent.id).update(
                status="AUTOAPPROVED"
            )
            public_embed = await _get_patent_embed(
                patent_id=db_patent.id, for_internal_use=False
            )
            await models.Patent.objects.filter(id=db_patent.id).update(
                message_id=(
                    await self.bot.get_channel(
                        settings.ECONOMY_PATENTS_PUBLIC_CHANNEL_ID
                    ).send(
                        embed=public_embed,
                        content=", ".join(
                            [
                                ("<@" + owner_id + ">")
                                for owner_id in db_patent.owner_ids.split(";")
                            ]
                        ),
                    )
                ).id
            )
            internal_embed = await _get_patent_embed(
                patent_id=db_patent.id, for_internal_use=True
            )
            await self.bot.get_channel(
                settings.ECONOMY_PATENTS_MODERATOR_CHANNEL_ID
            ).send(embed=internal_embed)
            await self._payout_for_patent(patent_id=patent_id)
        else:
            internal_embed = await _get_patent_embed(
                patent_id=db_patent.id, for_internal_use=True
            )
            await self.bot.get_channel(
                settings.ECONOMY_PATENTS_MODERATOR_CHANNEL_ID
            ).send(
                content=f"<@&{settings.ECONOMY_PATENTS_MODERATOR_ROLE_ID}>",
                embed=internal_embed,
                components=[
                    disnake.ui.Button(
                        style=disnake.ButtonStyle.green,
                        label="–û–¥–æ–±—Ä–∏—Ç—å",
                        custom_id=f"patent_approve:{db_patent.id}",
                    ),
                    disnake.ui.Button(
                        style=disnake.ButtonStyle.red,
                        label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        custom_id=f"patent_reject:{db_patent.id}",
                    ),
                ],
            )

    async def _process_moderator_decision(
        self, patent_id: int, approoved: bool, moderator_id: int
    ):
        db_patent = await models.Patent.objects.get(id=patent_id)
        if db_patent.status != "WAIT":
            return False

        await models.Patent.objects.filter(id=db_patent.id).update(
            status="APPROVED" if approoved else "REJECTED",
            moderator_id=moderator_id,
        )

        patent_message = await self.bot.get_channel(
            settings.ECONOMY_PATENTS_PUBLIC_CHANNEL_ID
        ).send(
            embed=await _get_patent_embed(
                patent_id=db_patent.id, for_internal_use=False
            ),
            content=", ".join(
                [("<@" + owner_id + ">") for owner_id in db_patent.owner_ids.split(";")]
            ),
        )
        await models.Patent.objects.filter(id=db_patent.id).update(
            message_id=patent_message.id
        )

        await self._payout_for_patent(patent_id=patent_id)

    async def _payout_for_patent(self, patent_id: int):
        db_patent = await models.Patent.objects.get(id=patent_id)
        if (
            db_patent.status == "WAIT"
            or not db_patent.is_payment_on_hold
            or db_patent.is_refunded
        ):
            return False

        payouts_cog = self.bot.get_cog("Payouts")
        if payouts_cog is None:
            await self.bot.get_channel(settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID).send(
                embed=build_simple_embed(
                    description="Unable to get Payments cog", failure=True
                )
            )
            raise RuntimeError("Payouts cog unavailable")

        patents_payout_project = await models.StructureProject.objects.filter(
            name="–ü–∞—Ç–µ–Ω—Ç—ã",
            guild_discord_id=settings.economy_guild.discord_id,
            from_card_str=settings.DD_BANK_PATENTS_CARD,
        ).first()
        if patents_payout_project is None:
            await self.bot.get_channel(settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID).send(
                embed=build_simple_embed(
                    description="Unable to get projects for payout", failure=True
                )
            )
            raise RuntimeError("Unable to get projects for payout")

        if db_patent.status in ["APPROVED", "AUTOAPPROVED"]:
            economics_price, moderator_price, banker_price = tuple(
                map(int, db_patent.price_breakdown.split(";"))
            )

            if economics_price > 0:
                payment_status, _ = await bank_api.transfer(
                    from_card_str=settings.DD_BANK_PATENTS_CARD,
                    to_card_str=settings.ECONOMY_PATENTS_TREASURY_CARD,
                    amount=economics_price,
                    token=patents_payout_project.plasmo_bearer_token,
                    message=f"–ù–∞–ª–æ–≥ –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ {formatters.format_patent_number(db_patent.id)}",
                )
                await self.bot.get_channel(
                    settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID
                ).send(
                    content=(
                        "<@&" + str(settings.ECONOMY_FAILED_PAYMENTS_ROLE_ID) + ">"
                    )
                    if not payment_status
                    else None,
                    embed=disnake.Embed(
                        description=f"{settings.DD_BANK_PATENTS_CARD} -> {settings.ECONOMY_PATENTS_TREASURY_CARD}\n"
                        f"`Amount:` {economics_price}\n`Message:` "
                        f"–ù–∞–ª–æ–≥ –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ {formatters.format_patent_number(db_patent.id)}\n"
                        f"`–°—Ç–∞—Ç—É—Å:` {payment_status}"
                    ),
                )
            if moderator_price > 0:
                moderator = self.bot.get_guild(
                    settings.economy_guild.discord_id
                ).get_member(db_patent.moderator_id)
                if moderator is None or moderator.id == self.bot.user.id:
                    await self.bot.get_channel(
                        settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID
                    ).send(
                        embed=build_simple_embed(
                            description=f"Unable to get moderator for patent {db_patent.id}",
                            failure=True,
                        )
                    )
                else:
                    payment_status = await payouts_cog.payout(  # type: ignore
                        user=moderator,
                        amount=moderator_price,
                        project=patents_payout_project,
                        message="–ó–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–∞—Ç–µ–Ω—Ç–∞",
                        transaction_message="–ó–∞ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ "
                        + formatters.format_patent_number(db_patent.id),
                        author=self.bot.get_guild(
                            settings.economy_guild.discord_id
                        ).get_member(self.bot.user.id),
                    )
                    await self.bot.get_channel(
                        settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID
                    ).send(
                        content=(
                            "<@&" + str(settings.ECONOMY_FAILED_PAYMENTS_ROLE_ID) + ">"
                        )
                        if not payment_status
                        else None,
                        embed=disnake.Embed(
                            description=f"{settings.DD_BANK_PATENTS_CARD} -> {moderator.mention}\n"
                            f"`Amount:` {moderator_price}\n`Message:` "
                            f"–ó–∞ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ {formatters.format_patent_number(db_patent.id)}\n"
                            f"`–°—Ç–∞—Ç—É—Å:` {payment_status}"
                        ),
                    )
            if banker_price > 0:
                banker = self.bot.get_guild(
                    settings.economy_guild.discord_id
                ).get_member(db_patent.banker_id)
                if banker is None or banker.id == self.bot.user.id:
                    await self.bot.get_channel(
                        settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID
                    ).send(
                        embed=build_simple_embed(
                            description=f"Unable to get banker for patent {db_patent.id}",
                            failure=True,
                        )
                    )
                else:
                    payment_status = await payouts_cog.payout(  # type: ignore
                        user=banker,
                        amount=banker_price,
                        project=patents_payout_project,
                        message="–ó–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞",
                        transaction_message="–ó–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ "
                        + formatters.format_patent_number(db_patent.id),
                        author=self.bot.get_guild(
                            settings.economy_guild.discord_id
                        ).get_member(self.bot.user.id),
                    )
                    await self.bot.get_channel(
                        settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID
                    ).send(
                        content=(
                            "<@&" + str(settings.ECONOMY_FAILED_PAYMENTS_ROLE_ID) + ">"
                        )
                        if not payment_status
                        else None,
                        embed=disnake.Embed(
                            description=f"{settings.DD_BANK_PATENTS_CARD} -> {banker.mention}\n"
                            f"`Amount:` {banker_price}\n`Message:` "
                            f"–ó–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞ {formatters.format_patent_number(db_patent.id)}\n"
                            f"`–°—Ç–∞—Ç—É—Å:` {payment_status}"
                        ),
                    )

            await models.Patent.objects.filter(id=db_patent.id).update(
                is_payment_on_hold=False
            )

        if db_patent.status == "REJECTED":
            economics_price, moderator_price, banker_price = tuple(
                map(int, db_patent.price_breakdown.split(";"))
            )

            if banker_price > 0:
                banker = self.bot.get_guild(
                    settings.economy_guild.discord_id
                ).get_member(db_patent.banker_id)
                if banker is None or banker.id == self.bot.user.id:
                    await self.bot.get_channel(
                        settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID
                    ).send(
                        embed=build_simple_embed(
                            description=f"Unable to get banker for patent {db_patent.id}",
                            failure=True,
                        )
                    )
                else:
                    payment_status = await payouts_cog.payout(  # type: ignore
                        user=banker,
                        amount=banker_price,
                        project=patents_payout_project,
                        message="–ó–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–∞",
                        transaction_message="–ó–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–≥–æ –ø–∞—Ç–µ–Ω—Ç–∞ "
                        + formatters.format_patent_number(db_patent.id),
                        author=self.bot.get_guild(
                            settings.economy_guild.discord_id
                        ).get_member(self.bot.user.id),
                    )
                    await self.bot.get_channel(
                        settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID
                    ).send(
                        content=(
                            "<@&" + str(settings.ECONOMY_FAILED_PAYMENTS_ROLE_ID) + ">"
                        )
                        if not payment_status
                        else None,
                        embed=disnake.Embed(
                            description=f"{settings.DD_BANK_PATENTS_CARD} -> {banker.mention}\n"
                            f"`Amount:` {banker_price}\n`Message:` "
                            f"–ó–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–≥–æ –ø–∞—Ç–µ–Ω—Ç–∞"
                            f" {formatters.format_patent_number(db_patent.id)}\n"
                            f"`–°—Ç–∞—Ç—É—Å:` {payment_status}"
                        ),
                    )

            if economics_price + moderator_price:
                payment_status, _ = await bank_api.transfer(
                    from_card_str=settings.DD_BANK_PATENTS_CARD,
                    to_card_str=db_patent.from_card_str,
                    amount=economics_price + moderator_price,
                    token=patents_payout_project.plasmo_bearer_token,
                    message=f"–ß–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –∑–∞ –ø–∞—Ç–µ–Ω—Ç {formatters.format_patent_number(db_patent.id)}",
                )
                await self.bot.get_channel(
                    settings.ECONOMY_DD_OPERATIONS_CHANNEL_ID
                ).send(
                    content=(
                        "<@&" + str(settings.ECONOMY_FAILED_PAYMENTS_ROLE_ID) + ">"
                    )
                    if not payment_status
                    else None,
                    embed=disnake.Embed(
                        description=f"{settings.DD_BANK_PATENTS_CARD} -> {db_patent.from_card_str}\n"
                        f"`Amount:` {economics_price + moderator_price}\n`Message:` "
                        f"–ß–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –∑–∞ –ø–∞—Ç–µ–Ω—Ç {formatters.format_patent_number(db_patent.id)}\n"
                        f"`–°—Ç–∞—Ç—É—Å:` {payment_status}"
                    ),
                )
            await models.Patent.objects.filter(id=db_patent.id).update(
                is_payment_on_hold=False,
                is_refunded=True,
            )

    @commands.Cog.listener("on_button_click")
    async def on_patent_review(self, inter: MessageInteraction):
        if (
            not inter.component.custom_id.startswith("patent")
            or inter.guild_id != settings.economy_guild.discord_id
        ):
            return

        command_patentid = inter.component.custom_id.split(":")
        if len(command_patentid) != 2:
            return

        command = command_patentid[0]
        patent_id = int(command_patentid[1])

        if command == "patent_approve":
            await inter.response.defer(ephemeral=True)
            await inter.edit_original_response(components=[])
            await self._process_moderator_decision(
                patent_id=patent_id,
                approoved=True,
                moderator_id=inter.author.id,
            )
        elif command == "patent_reject":
            await inter.response.defer(ephemeral=True)
            await inter.edit_original_response(components=[])
            await self._process_moderator_decision(
                patent_id=patent_id,
                approoved=False,
                moderator_id=inter.author.id,
            )
        elif command == "patent_remoderate":
            await inter.response.defer(ephemeral=True)
            await inter.edit_original_response(
                components=[
                    disnake.ui.Button(
                        style=disnake.ButtonStyle.gray,
                        label="Sent to remoderation",
                        disabled=True,
                    ),
                ],
            )
            await self._moderate_patent(patent_id=patent_id)
        else:
            return

        await inter.message.edit(
            embed=await _get_patent_embed(
                patent_id=patent_id,
                for_internal_use=True,
            ),
        )

    @commands.slash_command(
        name="force-patent", guild_ids=[settings.economy_guild.discord_id]
    )
    @commands.default_member_permissions(administrator=True)
    @commands.is_owner()
    async def force_patent_command(
        self,
        inter: ApplicationCommandInteraction,
        subject: str,
        owner_ids: str,
        banker_id: str,
        price_breakdown: str,
        is_payment_on_hold: bool,
        is_refunded: bool,
        from_card_str: str,
        patent_id: int,
        patent_type: str = commands.Param(choices=["–ê—Ä—Ç", "–î—Ä—É–≥–æ–µ"]),
        status: str = commands.Param(
            choices=["WAIT", "AUTOAPPROVED", "REJECTED", "APPROVED"]
        ),
        moderator_id: str = None,
        map_ids: str = None,
        is_lamination_skipped: bool = None,
        moderate: bool = False,
    ):
        """
        DEBUG COMMAND | Force patent registration/updating

        Parameters
        ----------
        inter: SlashInteraction
        subject: "–∞—Ä—Ç –ö–æ–º–∞—Ä"
        patent_type: –¢–∏–ø –ø–∞—Ç–µ–Ω—Ç–∞
        owner_ids: "123456789012345678;123456789012345678"
        banker_id: 123456789012345678
        status: "WAIT"
        price_breakdown: "100;0;0"
        is_payment_on_hold: true
        is_refunded: false
        from_card_str: "EB-1234"
        patent_id: 4
        moderator_id: 123456789012345678
        map_ids: "1;2;3"
        is_lamination_skipped: false
        moderate: Whether to moderate patent after registration
        """
        await inter.response.defer(ephemeral=True)

        db_patent, is_created = await models.Patent.objects.update_or_create(
            id=patent_id,
            defaults={
                "subject": subject,
                "is_art": patent_type == "–ê—Ä—Ç",
                "owner_ids": owner_ids,
                "banker_id": int(banker_id),
                "status": status,
                "price_breakdown": price_breakdown,
                "is_payment_on_hold": is_payment_on_hold,
                "is_refunded": is_refunded,
                "from_card_str": from_card_str,
                "moderator_id": int(moderator_id),
                "map_ids": map_ids,
                "is_lamination_skipped": is_lamination_skipped,
                "registration_date": datetime.datetime.now(),
            },
        )

        await inter.edit_original_message(
            embeds=[
                build_simple_embed(description=f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π: {is_created}"),
                _get_patent_embed(patent_id=db_patent.id, for_internal_use=True),
            ]
        )

        if moderate:
            await self._moderate_patent(patent_id=db_patent.id)

    @commands.slash_command(
        name="get-patent", guild_ids=[settings.economy_guild.discord_id]
    )
    @commands.default_member_permissions(administrator=True)
    async def get_patent_command(
        self,
        inter: GuildCommandInteraction,
        patent_id: int,
    ):
        """
        DEBUG COMMAND | Get patent embed

        Parameters
        ----------
        inter: GuildCommandInteraction
        patent_id: 4
        """
        await inter.response.defer(ephemeral=True)
        if (
            inter.author.guild_permissions.administrator
            or inter.author.id in self.bot.owner_ids
        ):
            await inter.edit_original_response(
                embed=await _get_patent_embed(
                    patent_id=patent_id, for_internal_use=True
                ),
                components=[
                    disnake.ui.Button(
                        style=disnake.ButtonStyle.red,
                        label="Reprocess",
                        custom_id=f"patent_remoderate:{patent_id}",
                        disabled=inter.author.id not in self.bot.owner_ids,
                    ),
                ],
            )
            return

        await inter.edit_original_response(
            embed=await _get_patent_embed(patent_id=patent_id, for_internal_use=False),
        )

    async def cog_load(self):
        logger.info("%s loaded", __name__)

    # todo: /get-patent id:
    # todo: patents in profiles?
    # todo: (maybe) ability to pass payment part if user is bot owner


def setup(client):
    """
    Internal disnake setup function
    """
    client.add_cog(BankerPatents(client))
