import datetime
import logging
from typing import Optional

import disnake
import orm
from aiohttp import ClientSession
from disnake import ApplicationCommandInteraction
from disnake.ext import commands

from plasmotools import checks, formatters, models, plasmo_api, settings
from plasmotools.autocompleters.bank import search_bank_cards_autocompleter
from plasmotools.autocompleters.plasmo_structures import payouts_projects_autocompleter
from plasmotools.checks import is_guild_registered
from plasmotools.embeds import build_simple_embed
from plasmotools.plasmo_api import bank
from plasmotools.plasmo_api.tokens import get_token_scopes

logger = logging.getLogger(__name__)


# todo: Rewrite with buttons


class Payouts(commands.Cog):
    def __init__(self, bot: disnake.ext.commands.Bot):
        self.bot = bot

    # TODO:  payouts statistics
    # TODO: remove create/read/update/delete commands and combine it to /projects

    @commands.guild_only()
    @commands.slash_command(
        name="projects",
        dm_permission=False,
    )
    @is_guild_registered()
    @checks.blocked_users_slash_command_check()
    async def projects(self, inter: ApplicationCommandInteraction):
        """
        –ü–æ–º–æ—â—å –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –≤—ã–ø–ª–∞—Ç–∞–º {{PROJECTS_COMMAND}}
        """
        await inter.send(
            embed=build_simple_embed(
                without_title=True,
                description="–ü—Ä–æ–µ–∫—Ç—ã –≤ Plasmo Tools - —ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–ª–∞—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ "
                "/–ø—Ä–æ–µ–∫—Ç—ã-—Å–æ–∑–¥–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ </payout:1077320503632609291>\n\n"
                "**–ü–æ–ª—É—á–µ–Ω–∏–µ plasmo_token**\n –ö–æ–≥–¥–∞ –ø–µ—Ä–µ–π–¥–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
                "–í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ —Å–∞–π—Ç, –≥–¥–µ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:\n"
                "pt.haffk.tech/oauth/#access_token=***123TOKEN123**&scope=...&token_type=...",
            ),
            ephemeral=True,
            components=[
                disnake.ui.Button(
                    url=settings.oauth2_url_for_projects,
                    emoji="üîó",
                    label="–ü–æ–ª—É—á–∏—Ç—å plasmo token",
                )
            ],
        )

    @commands.guild_only()
    @commands.slash_command(name="–ø—Ä–æ–µ–∫—Ç—ã-—Å–æ–∑–¥–∞—Ç—å", dm_permission=False)
    @commands.default_member_permissions(administrator=True)
    @checks.is_guild_registered()
    async def projects_create(  # todo: remove
        self,
        inter: ApplicationCommandInteraction,
        name: str,
        webhook_url: str,
        plasmo_bearer_token: str,
        from_card_str: int = commands.Param(
            autocomplete=search_bank_cards_autocompleter
        ),
    ):
        """
        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç

        Parameters
        ----------
        inter
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ò–Ω—Ç–µ—Ä–ø–æ–ª"
        webhook_url: –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±—Ö—É–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ https://discord.com/api/webhooks/...)
        from_card_str: –ö–∞—Ä—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –≤—ã–ø–ª–∞—Ç–∞
        plasmo_bearer_token: –¢–æ–∫–µ–Ω –ø–ª–∞–∑–º–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–ø—Ä–æ–µ–∫—Ç—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å
        """
        # todo: autocomplete for from_card
        await inter.response.defer(ephemeral=True)
        await inter.edit_original_message(
            embed=disnake.Embed(
                color=disnake.Color.yellow(),
                title="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É—é —Ç–æ–∫–µ–Ω...",
            ),
        )
        scopes = await get_token_scopes(plasmo_bearer_token)
        if "bank:transfer" not in scopes and "bank:manage" not in scopes:
            await inter.edit_original_message(
                embed=build_simple_embed(
                    "–£–∫–∞–∑–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω. ||Missing bank:manage / bank:transfer scopes||\n"
                    f"–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –≤ [–ø–æ–¥–¥–µ—Ä–∂–∫–µ DDT]({settings.DevServer.support_invite})",
                    failure=True,
                ),
            )
            return
        await inter.edit_original_message(
            embed=disnake.Embed(
                color=disnake.Color.yellow(),
                title="–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç...",
            ),
        )
        db_project = await models.StructureProject.objects.create(
            name=name,
            is_active=True,
            guild_discord_id=inter.guild.id,
            webhook_url=webhook_url,
            from_card_str=from_card_str,
            plasmo_bearer_token=plasmo_bearer_token,
        )
        await inter.edit_original_message(
            embed=disnake.Embed(
                color=disnake.Color.dark_green(),
                title="–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
                description=f"–ü—Ä–æ–µ–∫—Ç: {name}\n"
                f"–í–µ–±—Ö—É–∫: {webhook_url}\n"
                f"–ö–∞—Ä—Ç–∞: {from_card_str}\n"
                f"–¢–æ–∫–µ–Ω: ||{plasmo_bearer_token[:-5]}...||\n"
                f"ID: {db_project.id}",
            ),
        )

    @commands.guild_only()
    @commands.slash_command(name="–ø—Ä–æ–µ–∫—Ç—ã-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", dm_permission=False)
    @commands.default_member_permissions(administrator=True)
    @checks.blocked_users_slash_command_check()
    @is_guild_registered()
    async def projects_edit(  # todo: remove
        self,
        inter: ApplicationCommandInteraction,
        project_id: int,
        name: Optional[str] = None,
        webhook_url: Optional[str] = None,
        is_active: Optional[bool] = None,
        from_card_str: Optional[str] = commands.Param(
            name="from_card", default=None, autocomplete=search_bank_cards_autocompleter
        ),
        plasmo_bearer_token: Optional[str] = None,
    ):
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        Parameters
        ----------
        inter
        project_id: –ê–π–¥–∏ –ø—Ä–æ–µ–∫—Ç–∞
        webhook_url: –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±—Ö—É–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (https://discordapp.com/api/webhooks/{id}/{token})
        is_active: –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø—Ä–æ–µ–∫—Ç
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ò–Ω—Ç–µ—Ä–ø–æ–ª" –∏–ª–∏ "–ü–æ—Å—Ç—Ä–æ–π–∫–∞ —Å—É–¥–∞"
        from_card_str: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –≤—ã–ø–ª–∞—Ç–∞
        plasmo_bearer_token: –¢–æ–∫–µ–Ω –ø–ª–∞–∑–º–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–ø—Ä–æ–µ–∫—Ç—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å
        """
        await inter.response.defer(ephemeral=True)
        if not (
            await models.StructureProject.objects.filter(
                id=project_id, guild_discord_id=inter.guild.id
            ).exists()
        ):
            return await inter.send(
                embed=build_simple_embed("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", failure=True),
                ephemeral=True,
            )

        db_project = await models.StructureProject.objects.get(
            id=project_id, guild_discord_id=inter.guild.id
        )
        await db_project.update(
            name=name if name is not None else db_project.name,
            is_active=is_active if is_active is not None else db_project.is_active,
            from_card_str=from_card_str
            if from_card_str is not None
            else db_project.from_card_str,
            plasmo_bearer_token=plasmo_bearer_token
            if plasmo_bearer_token is not None
            else db_project.plasmo_bearer_token,
            webhook_url=webhook_url
            if webhook_url is not None
            else db_project.webhook_url,
        )
        await inter.send(
            embed=build_simple_embed(
                "–ü—Ä–æ–µ–∫—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω",
            ),
            ephemeral=True,
        )

    @commands.guild_only()
    @commands.slash_command(name="–ø—Ä–æ–µ–∫—Ç—ã-—É–¥–∞–ª–∏—Ç—å", dm_permission=False)
    @commands.default_member_permissions(administrator=True)
    @checks.blocked_users_slash_command_check()
    @is_guild_registered()
    async def projects_delete(  # todo: remove
        self,
        inter: ApplicationCommandInteraction,
        project_id: int,
    ):
        """
        –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Parameters
        ----------
        inter
        project_id: –ê–π–¥–∏ –ø—Ä–æ–µ–∫—Ç–∞

        """
        await inter.response.defer(ephemeral=True)
        await models.StructureProject.objects.filter(
            id=project_id, guild_discord_id=inter.guild.id
        ).delete()
        await inter.edit_original_message(
            embed=build_simple_embed(
                "–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω",
            ),
        )

    @commands.guild_only()
    @commands.slash_command(name="–ø—Ä–æ–µ–∫—Ç—ã-—Å–ø–∏—Å–æ–∫", dm_permission=False)
    @commands.default_member_permissions(administrator=True)
    @checks.blocked_users_slash_command_check()
    @is_guild_registered()
    async def projects_list(self, inter: ApplicationCommandInteraction):  # todo: remove
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        """
        await inter.response.defer(ephemeral=True)
        db_projects = await models.StructureProject.objects.filter(
            guild_discord_id=inter.guild.id
        ).all()
        embed = disnake.Embed(
            color=disnake.Color.dark_green(),
            title=f"–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã {inter.guild.name}",
        ).set_footer(
            text="[Coming soon] –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
        )
        embed.add_field(
            name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ - [–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å]",
            value="–ê–π–¥–∏ / –ö–∞—Ä—Ç–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç / –¢–æ–∫–µ–Ω \n–í–µ–±—Ö—É–∫",
        )
        for project in db_projects:
            embed.add_field(
                name=f"{project.name} - {'–ê–∫—Ç–∏–≤–µ–Ω' if project.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}  ",
                value=f"{project.id} / {project.from_card_str} / "
                f"||{project.plasmo_bearer_token[:-5]}...||\n"
                f"||{project.webhook_url}||",
                inline=False,
            )

        await inter.edit_original_message(embed=embed)

    async def payout(
        self,
        user: disnake.Member,
        amount: int,
        project,
        message: str,
        transaction_message: str = None,
        interaction: Optional[disnake.Interaction] = None,
        author: Optional[disnake.Member] = None,
    ) -> bool:
        transaction_message = (
            message if transaction_message is None else transaction_message
        )

        if amount <= 0 or amount > 69420:
            if interaction is None:
                return False
            await interaction.edit_original_message(
                embed=build_simple_embed(
                    "–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0 < `amount` <= 69420)",
                    failure=True,
                ),
            )
            return False

        if user.bot:
            if interaction is None:
                return False
            await interaction.edit_original_message(
                embed=build_simple_embed("–ë–æ—Ç–∞–º –≤—ã–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–µ–ª—å–∑—è", failure=True),
            )
            return False

        if not settings.DEBUG:
            plasmo_user = self.bot.get_guild(
                settings.PlasmoRPGuild.guild_id
            ).get_member(user.id)

            if plasmo_user is None or settings.PlasmoRPGuild.player_role_id not in [
                role.id for role in plasmo_user.roles
            ]:
                if interaction is None:
                    return False
                await interaction.edit_original_message(
                    embed=build_simple_embed(
                        "–í—ã–ø–ª–∞—Ç—ã –≤–æ–∑–º–æ–∂–Ω—ã —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∞–º Plasmo RP", failure=True
                    ),
                )
                return False
        else:
            plasmo_user = user

        if interaction is not None:
            await interaction.edit_original_message(
                embed=disnake.Embed(
                    color=disnake.Color.yellow(),
                    description="–ü–æ–ª—É—á–∞—é –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã...",
                )
            )

        from_card_str = project.from_card_str
        user_card_str = (
            await models.PersonalSettings.objects.get_or_create(
                discord_id=user.id, defaults={}
            )
        )[0].saved_card_str
        if user_card_str is None:
            user_cards = sorted(
                [
                    card
                    for card in await bank.search_cards(
                        token=project.plasmo_bearer_token,
                        query=plasmo_user.display_name,
                    )
                    if formatters.format_bank_card(
                        card["id"], bank_prefix=card["bank_code"]
                    )
                    != from_card_str
                    and card["holder_type"] == 0  # User
                    and card["holder"] == plasmo_user.display_name
                ],
                key=lambda card: card["value"],
                reverse=True,
            )

            if len(user_cards) == 0:
                if interaction is not None:
                    await interaction.edit_original_message(
                        embed=build_simple_embed(
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã, Plasmo Tools —É–≤–µ–¥–æ–º–∏—Ç –∏–≥—Ä–æ–∫–∞ –æ–± —ç—Ç–æ–º",
                            failure=True,
                        ),
                    )
                try:
                    await user.send(
                        embed=disnake.Embed(
                            color=disnake.Color.dark_red(),
                            title="‚ö† Plasmo Tools –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã–ø–ª–∞—Ç—É",
                            description="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã –æ—Ç"
                            " —Å—Ç—Ä—É–∫—Ç—É—Ä –æ—Ñ–æ—Ä–º–∏—Ç–µ –∫–∞—Ä—Ç—É –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ª—é–±—É—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑"
                            " /—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å-–∫–∞—Ä—Ç—É-–¥–ª—è-–≤—ã–ø–ª–∞—Ç",
                        )
                    )
                except disnake.Forbidden:
                    if interaction is not None:
                        await interaction.send(
                            embed=build_simple_embed(
                                f"–£ {user.mention} –∑–∞–∫—Ä—ã—Ç—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,"
                                f" –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –ª–∏—á–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞ "
                                f"—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ /—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å-–∫–∞—Ä—Ç—É-–¥–ª—è-–≤—ã–ø–ª–∞—Ç",
                                failure=True,
                            ),
                            ephemeral=True,
                        )
                    else:
                        db_guild = await models.StructureGuild.objects.get(
                            discord_id=author.guild.id
                        ).first()
                        await self.bot.get_channel(db_guild.logs_channel_id).send(
                            embed=build_simple_embed(
                                f"–£ {user.mention} –∑–∞–∫—Ä—ã—Ç—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, "
                                f"–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –≤—ã–ø–ª–∞—Ç–æ–π",
                                failure=True,
                            )
                        )
                return False

            user_card_str = formatters.format_bank_card(
                user_cards[0]["id"], bank_prefix=user_cards[0]["bank_code"]
            )
            try:
                await user.send(
                    embed=disnake.Embed(
                        color=disnake.Color.dark_red(),
                        title="‚ö† –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç",
                        description=f"–í—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–ø–ª–∞—Ç. –ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∫–∞—Ä—Ç—É "
                        f"**{user_card_str}** –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é.\n\n"
                        f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å **/—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å-–∫–∞—Ä—Ç—É-–¥–ª—è-–≤—ã–ø–ª–∞—Ç**, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã "
                        f"–Ω–∞ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É",
                    )
                )
            except disnake.Forbidden:
                pass

            await models.PersonalSettings.objects.filter(discord_id=user.id).update(
                saved_card_str=user_card_str
            )
        if interaction is not None:
            await interaction.edit_original_message(
                embed=disnake.Embed(
                    color=disnake.Color.yellow(), description="–ü–µ—Ä–µ–≤–æ–∂—É –∞–ª–º–∞–∑—ã..."
                )
            )
        if from_card_str == user_card_str:
            if interaction is not None:
                await interaction.edit_original_message(
                    embed=build_simple_embed(
                        "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∞–ª–º–∞–∑—ã –Ω–∞ —ç—Ç—É –∫–∞—Ä—Ç—É", failure=True
                    ),
                )
            return False
        status, error_message = await bank.transfer(
            token=project.plasmo_bearer_token,
            from_card_str=from_card_str,
            to_card_str=user_card_str,
            amount=amount,
            message=transaction_message,
        )
        if not status:
            if interaction is None:
                return False  # todo: send to pt_logs channel
            await interaction.edit_original_message(
                embed=build_simple_embed(
                    "API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É: **" + error_message + "**", failure=True
                ),
            )
            return False
        if interaction is not None:
            await interaction.edit_original_message(
                embed=disnake.Embed(
                    color=disnake.Color.yellow(),
                    description="–û—Ç–ø—Ä–∞–≤–ª—è—é –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ...",
                )
            )

        embed = disnake.Embed(
            color=disnake.Color.dark_green(),
            description=f"{user.mention} –ø–æ–ª—É—á–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ **{amount}** –∞–ª–º. ",
        ).set_author(
            name=plasmo_user.display_name,
            icon_url="https://plasmorp.com/avatar/" + plasmo_user.display_name,
        )
        if message != "":
            embed.add_field(name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", value=message)

        async with ClientSession() as session:
            webhook = disnake.Webhook.from_url(project.webhook_url, session=session)
            try:
                await webhook.send(
                    content=user.mention,
                    embed=embed,
                )
            except disnake.errors.NotFound:
                if interaction is not None:
                    await interaction.edit_original_message(
                        embed=build_simple_embed(
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±—Ö—É–∫—É. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –∏–≥—Ä–æ–∫ –Ω–µ –±—ã–ª –æ–ø–æ–≤–µ—â–µ–Ω",
                            failure=True,
                        ),
                    )

        db_guild = await models.StructureGuild.objects.get(
            discord_id=interaction.guild.id
            if interaction is not None
            else author.guild.id
        )
        await self.bot.get_channel(db_guild.logs_channel_id).send(
            embed=embed.add_field(
                "–í—ã–ø–ª–∞—Ç–∏–ª",
                interaction.author.mention
                if interaction is not None
                else author.mention,
                inline=False,
            )
            .add_field(
                name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É", value=transaction_message, inline=False
            )
            .add_field("–ü—Ä–æ–µ–∫—Ç", project.name, inline=False)
            .add_field("–° –∫–∞—Ä—Ç—ã", from_card_str, inline=False)
            .add_field(
                "–ù–∞ –∫–∞—Ä—Ç—É",
                user_card_str,
                inline=False,
            )
        )
        if interaction is not None:
            await interaction.edit_original_message(
                embed=build_simple_embed(
                    f"{user.mention} –ø–æ–ª—É—á–∏–ª –≤—ã–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ **{amount}** {settings.Emojis.diamond} –Ω–∞ "
                    f"–∫–∞—Ä—Ç—É {user_card_str}\n\n`–°–æ–æ–±—â–µ–Ω–∏–µ:` {message}\n`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É:` {transaction_message}",
                ),
            )
        # todo: save failed payments and retry them later
        await models.StructurePayout.objects.create(
            project_id=project.id,
            user_id=user.id,
            payer_id=interaction.author.id if interaction is not None else author.id,
            is_paid=True,
            from_card_str=from_card_str,
            to_card_str=user_card_str,
            amount=amount,
            message=message,
            date=datetime.datetime.now(),
        )
        author = interaction.author if interaction is not None else author
        await self.bot.get_channel(settings.DevServer.transactions_channel_id).send(
            embed=build_simple_embed(
                without_title=True,
                description=f"{from_card_str} -> "
                f"{amount} {settings.Emojis.diamond} -> {user_card_str}\n"
                f"Author {author.display_name} {author.mention}\n Message: {message}",
            )
        )
        return True

    @is_guild_registered()
    @checks.blocked_users_slash_command_check()
    @commands.default_member_permissions(administrator=True)
    @commands.slash_command(dm_permission=False, name="payout")
    async def payout_command(
        self,
        inter: disnake.GuildCommandInteraction,
        user: disnake.Member = commands.Param(),
        amount: int = commands.Param(),
        project_id: str = commands.Param(
            autocomplete=payouts_projects_autocompleter,
        ),
        message: str = commands.Param(),
    ):
        """
        Payout diamonds to player {{PAYOUT_COMMAND}}

        Parameters
        ----------
        inter
        user: Player to pay {{PAYOUT_PLAYER}}
        amount: Amount of diamonds to payout {{PAYOUT_AMOUNT}}
        project_id: Payout project {{PAYOUT_PROJECT}}
        message: Comment to payout {{PAYOUT_MESSAGE}}
        """
        await inter.response.defer(ephemeral=True)
        if not project_id.isdigit():
            await inter.edit_original_message(
                embed=build_simple_embed("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", failure=True),
            )
            return
        try:
            db_project = await models.StructureProject.objects.get(
                id=int(project_id), is_active=True, guild_discord_id=inter.guild.id
            )
        except orm.NoMatch:
            await inter.edit_original_message(
                embed=build_simple_embed(
                    f"–ü—Ä–æ–µ–∫—Ç {project_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", failure=True
                ),
            )
            return

        await self.payout(
            interaction=inter,
            user=user,
            amount=amount,
            project=db_project,
            message=message,
        )

    @commands.slash_command(
        name="set-payouts-card",
    )
    @checks.blocked_users_slash_command_check()
    async def set_saved_card(
        self,
        inter: disnake.ApplicationCommandInteraction,
        card_str: str = commands.Param(
            name="card",
            autocomplete=search_bank_cards_autocompleter,
        ),
    ):
        """
        Set up your card for payouts {{SET_PAYOUTS_CARD_COMMAND}}

        Parameters
        ----------
        inter
        card_str: Card number, format: EB-9000. EB-0142. DD-0009 {{SET_PAYOUTS_CARD_PARAM}}
        """
        await inter.response.defer(ephemeral=True)

        await inter.edit_original_message(
            embed=disnake.Embed(
                color=disnake.Color.yellow(), description="–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–µ..."
            )
        )

        api_card = await plasmo_api.bank.get_card_data(card_str)
        if api_card is None:
            await inter.edit_original_message(
                embed=build_simple_embed(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–µ", failure=True
                ),
            )
            return

        await models.PersonalSettings.objects.update_or_create(
            discord_id=inter.author.id,
            defaults={
                "saved_card_str": card_str,
            },
        )

        await inter.edit_original_message(
            embed=build_simple_embed(
                "–ö–∞—Ä—Ç–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n"
                f" {card_str} - {api_card['name']}\n"
                f"–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç {api_card['holder']}",
            )
        )

    async def cog_load(self):
        logger.info("%s loaded", __name__)


def setup(bot: disnake.ext.commands.Bot):
    """
    Disnake internal setup function
    """
    bot.add_cog(Payouts(bot))
